
temperatureAdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb0  08005bb0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb8  08005bb8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005bc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000098  08005c58  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08005c58  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f57d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226f  00000000  00000000  0002f645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018878  00000000  00000000  00033410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107b1  00000000  00000000  0004bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b258  00000000  00000000  0005c439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c8  00000000  00000000  000f76e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005adc 	.word	0x08005adc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005adc 	.word	0x08005adc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b974 	b.w	8000d1c <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9d08      	ldr	r5, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	468e      	mov	lr, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14d      	bne.n	8000af6 <__udivmoddi4+0xaa>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	d969      	bls.n	8000b34 <__udivmoddi4+0xe8>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b152      	cbz	r2, 8000a7c <__udivmoddi4+0x30>
 8000a66:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6a:	f1c2 0120 	rsb	r1, r2, #32
 8000a6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a76:	ea41 0e03 	orr.w	lr, r1, r3
 8000a7a:	4094      	lsls	r4, r2
 8000a7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a80:	0c21      	lsrs	r1, r4, #16
 8000a82:	fbbe f6f8 	udiv	r6, lr, r8
 8000a86:	fa1f f78c 	uxth.w	r7, ip
 8000a8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a92:	fb06 f107 	mul.w	r1, r6, r7
 8000a96:	4299      	cmp	r1, r3
 8000a98:	d90a      	bls.n	8000ab0 <__udivmoddi4+0x64>
 8000a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aa2:	f080 811f 	bcs.w	8000ce4 <__udivmoddi4+0x298>
 8000aa6:	4299      	cmp	r1, r3
 8000aa8:	f240 811c 	bls.w	8000ce4 <__udivmoddi4+0x298>
 8000aac:	3e02      	subs	r6, #2
 8000aae:	4463      	add	r3, ip
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab8:	fb08 3310 	mls	r3, r8, r0, r3
 8000abc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac0:	fb00 f707 	mul.w	r7, r0, r7
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x92>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad0:	f080 810a 	bcs.w	8000ce8 <__udivmoddi4+0x29c>
 8000ad4:	42a7      	cmp	r7, r4
 8000ad6:	f240 8107 	bls.w	8000ce8 <__udivmoddi4+0x29c>
 8000ada:	4464      	add	r4, ip
 8000adc:	3802      	subs	r0, #2
 8000ade:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ae2:	1be4      	subs	r4, r4, r7
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	b11d      	cbz	r5, 8000af0 <__udivmoddi4+0xa4>
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	2300      	movs	r3, #0
 8000aec:	e9c5 4300 	strd	r4, r3, [r5]
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0xc2>
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	f000 80ef 	beq.w	8000cde <__udivmoddi4+0x292>
 8000b00:	2600      	movs	r6, #0
 8000b02:	e9c5 0100 	strd	r0, r1, [r5]
 8000b06:	4630      	mov	r0, r6
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	fab3 f683 	clz	r6, r3
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d14a      	bne.n	8000bac <__udivmoddi4+0x160>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xd4>
 8000b1a:	4282      	cmp	r2, r0
 8000b1c:	f200 80f9 	bhi.w	8000d12 <__udivmoddi4+0x2c6>
 8000b20:	1a84      	subs	r4, r0, r2
 8000b22:	eb61 0303 	sbc.w	r3, r1, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	469e      	mov	lr, r3
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d0e0      	beq.n	8000af0 <__udivmoddi4+0xa4>
 8000b2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b32:	e7dd      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000b34:	b902      	cbnz	r2, 8000b38 <__udivmoddi4+0xec>
 8000b36:	deff      	udf	#255	; 0xff
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	f040 8092 	bne.w	8000c66 <__udivmoddi4+0x21a>
 8000b42:	eba1 010c 	sub.w	r1, r1, ip
 8000b46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4a:	fa1f fe8c 	uxth.w	lr, ip
 8000b4e:	2601      	movs	r6, #1
 8000b50:	0c20      	lsrs	r0, r4, #16
 8000b52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b56:	fb07 1113 	mls	r1, r7, r3, r1
 8000b5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b5e:	fb0e f003 	mul.w	r0, lr, r3
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x12c>
 8000b66:	eb1c 0101 	adds.w	r1, ip, r1
 8000b6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x12a>
 8000b70:	4288      	cmp	r0, r1
 8000b72:	f200 80cb 	bhi.w	8000d0c <__udivmoddi4+0x2c0>
 8000b76:	4643      	mov	r3, r8
 8000b78:	1a09      	subs	r1, r1, r0
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b80:	fb07 1110 	mls	r1, r7, r0, r1
 8000b84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b88:	fb0e fe00 	mul.w	lr, lr, r0
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x156>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b98:	d202      	bcs.n	8000ba0 <__udivmoddi4+0x154>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f200 80bb 	bhi.w	8000d16 <__udivmoddi4+0x2ca>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	eba4 040e 	sub.w	r4, r4, lr
 8000ba6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000baa:	e79c      	b.n	8000ae6 <__udivmoddi4+0x9a>
 8000bac:	f1c6 0720 	rsb	r7, r6, #32
 8000bb0:	40b3      	lsls	r3, r6
 8000bb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bba:	fa20 f407 	lsr.w	r4, r0, r7
 8000bbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc2:	431c      	orrs	r4, r3
 8000bc4:	40f9      	lsrs	r1, r7
 8000bc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bca:	fa00 f306 	lsl.w	r3, r0, r6
 8000bce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bd2:	0c20      	lsrs	r0, r4, #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000be0:	fb08 f00e 	mul.w	r0, r8, lr
 8000be4:	4288      	cmp	r0, r1
 8000be6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bea:	d90b      	bls.n	8000c04 <__udivmoddi4+0x1b8>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bf4:	f080 8088 	bcs.w	8000d08 <__udivmoddi4+0x2bc>
 8000bf8:	4288      	cmp	r0, r1
 8000bfa:	f240 8085 	bls.w	8000d08 <__udivmoddi4+0x2bc>
 8000bfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000c02:	4461      	add	r1, ip
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c18:	458e      	cmp	lr, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x1e2>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c24:	d26c      	bcs.n	8000d00 <__udivmoddi4+0x2b4>
 8000c26:	458e      	cmp	lr, r1
 8000c28:	d96a      	bls.n	8000d00 <__udivmoddi4+0x2b4>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c32:	fba0 9402 	umull	r9, r4, r0, r2
 8000c36:	eba1 010e 	sub.w	r1, r1, lr
 8000c3a:	42a1      	cmp	r1, r4
 8000c3c:	46c8      	mov	r8, r9
 8000c3e:	46a6      	mov	lr, r4
 8000c40:	d356      	bcc.n	8000cf0 <__udivmoddi4+0x2a4>
 8000c42:	d053      	beq.n	8000cec <__udivmoddi4+0x2a0>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x212>
 8000c46:	ebb3 0208 	subs.w	r2, r3, r8
 8000c4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c52:	fa22 f306 	lsr.w	r3, r2, r6
 8000c56:	40f1      	lsrs	r1, r6
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	f1c2 0320 	rsb	r3, r2, #32
 8000c6a:	40d8      	lsrs	r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	fa21 f303 	lsr.w	r3, r1, r3
 8000c74:	4091      	lsls	r1, r2
 8000c76:	4301      	orrs	r1, r0
 8000c78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c84:	fb07 3610 	mls	r6, r7, r0, r3
 8000c88:	0c0b      	lsrs	r3, r1, #16
 8000c8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c92:	429e      	cmp	r6, r3
 8000c94:	fa04 f402 	lsl.w	r4, r4, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x260>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca2:	d22f      	bcs.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d92d      	bls.n	8000d04 <__udivmoddi4+0x2b8>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	b289      	uxth	r1, r1
 8000cb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x28a>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ccc:	d216      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d914      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000cd2:	3e02      	subs	r6, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cdc:	e738      	b.n	8000b50 <__udivmoddi4+0x104>
 8000cde:	462e      	mov	r6, r5
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	e705      	b.n	8000af0 <__udivmoddi4+0xa4>
 8000ce4:	4606      	mov	r6, r0
 8000ce6:	e6e3      	b.n	8000ab0 <__udivmoddi4+0x64>
 8000ce8:	4618      	mov	r0, r3
 8000cea:	e6f8      	b.n	8000ade <__udivmoddi4+0x92>
 8000cec:	454b      	cmp	r3, r9
 8000cee:	d2a9      	bcs.n	8000c44 <__udivmoddi4+0x1f8>
 8000cf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e7a3      	b.n	8000c44 <__udivmoddi4+0x1f8>
 8000cfc:	4646      	mov	r6, r8
 8000cfe:	e7ea      	b.n	8000cd6 <__udivmoddi4+0x28a>
 8000d00:	4620      	mov	r0, r4
 8000d02:	e794      	b.n	8000c2e <__udivmoddi4+0x1e2>
 8000d04:	4640      	mov	r0, r8
 8000d06:	e7d1      	b.n	8000cac <__udivmoddi4+0x260>
 8000d08:	46d0      	mov	r8, sl
 8000d0a:	e77b      	b.n	8000c04 <__udivmoddi4+0x1b8>
 8000d0c:	3b02      	subs	r3, #2
 8000d0e:	4461      	add	r1, ip
 8000d10:	e732      	b.n	8000b78 <__udivmoddi4+0x12c>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e709      	b.n	8000b2a <__udivmoddi4+0xde>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	e742      	b.n	8000ba2 <__udivmoddi4+0x156>

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <AvgFilter>:
 *      Author: npedu002
 */

#include "filter.h"

uint16_t AvgFilter(uint16_t inData){
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
	//몇번 필터하느냐에 따라 정밀도가 달라짐
	static uint16_t filterBuffer[100];
	static uint16_t sumValue = 0;
	static uint8_t bufPos = 0;
	// 합계에서 현재위치의 버퍼값을 빼기
	sumValue -= filterBuffer[bufPos];
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <AvgFilter+0x88>)
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <AvgFilter+0x8c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4619      	mov	r1, r3
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <AvgFilter+0x90>)
 8000d36:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <AvgFilter+0x88>)
 8000d40:	801a      	strh	r2, [r3, #0]
	// 현재위치의 버퍼값 생성
	filterBuffer[bufPos]= inData;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <AvgFilter+0x8c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4619      	mov	r1, r3
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <AvgFilter+0x90>)
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	// 합계에서 현재위치의 버퍼값을 더하기
	sumValue += filterBuffer[bufPos];
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <AvgFilter+0x8c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <AvgFilter+0x90>)
 8000d58:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <AvgFilter+0x88>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <AvgFilter+0x88>)
 8000d66:	801a      	strh	r2, [r3, #0]
	//덧셈을 줄이기 위하여 이러한 방식을 씀
	bufPos++;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <AvgFilter+0x8c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <AvgFilter+0x8c>)
 8000d72:	701a      	strb	r2, [r3, #0]
	bufPos %= 100;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <AvgFilter+0x8c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <AvgFilter+0x94>)
 8000d7a:	fba2 1203 	umull	r1, r2, r2, r3
 8000d7e:	0952      	lsrs	r2, r2, #5
 8000d80:	2164      	movs	r1, #100	; 0x64
 8000d82:	fb01 f202 	mul.w	r2, r1, r2
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <AvgFilter+0x8c>)
 8000d8c:	701a      	strb	r2, [r3, #0]
	//100이 되면 0이되도록
	return sumValue /100;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <AvgFilter+0x88>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <AvgFilter+0x94>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	095b      	lsrs	r3, r3, #5
 8000d9a:	b29b      	uxth	r3, r3
	//100개의 buffer니까 100을 나눠주면 평균값이 나옴
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	200000b4 	.word	0x200000b4
 8000dac:	200000b6 	.word	0x200000b6
 8000db0:	200000b8 	.word	0x200000b8
 8000db4:	51eb851f 	.word	0x51eb851f

08000db8 <Kalman>:

double Kalman(double measurement) {
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0b00 	vstr	d0, [r7]
    static double R = 0.25;//pow(0.5, 2);
    static double K = 1.0;
    static double X = 20.0;

    // Kalman Simple Filter(수식 치환)
    P = P + varP;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <Kalman+0xe4>)
 8000dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <Kalman+0xe8>)
 8000dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dce:	f7ff fa5d 	bl	800028c <__adddf3>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4931      	ldr	r1, [pc, #196]	; (8000e9c <Kalman+0xe4>)
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]
    K = P / (P + R);
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <Kalman+0xe4>)
 8000dde:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000de2:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <Kalman+0xe4>)
 8000de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <Kalman+0xec>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fa4d 	bl	800028c <__adddf3>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4620      	mov	r0, r4
 8000df8:	4629      	mov	r1, r5
 8000dfa:	f7ff fd27 	bl	800084c <__aeabi_ddiv>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4929      	ldr	r1, [pc, #164]	; (8000ea8 <Kalman+0xf0>)
 8000e04:	e9c1 2300 	strd	r2, r3, [r1]
    X = (K * measurement) + (1 - K) * X;
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <Kalman+0xf0>)
 8000e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e12:	f7ff fbf1 	bl	80005f8 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <Kalman+0xf0>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f04f 0000 	mov.w	r0, #0
 8000e28:	4920      	ldr	r1, [pc, #128]	; (8000eac <Kalman+0xf4>)
 8000e2a:	f7ff fa2d 	bl	8000288 <__aeabi_dsub>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <Kalman+0xf8>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fbdc 	bl	80005f8 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4620      	mov	r0, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	f7ff fa20 	bl	800028c <__adddf3>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4917      	ldr	r1, [pc, #92]	; (8000eb0 <Kalman+0xf8>)
 8000e52:	e9c1 2300 	strd	r2, r3, [r1]
    P = (1 - K) * P;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <Kalman+0xf0>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	f04f 0000 	mov.w	r0, #0
 8000e60:	4912      	ldr	r1, [pc, #72]	; (8000eac <Kalman+0xf4>)
 8000e62:	f7ff fa11 	bl	8000288 <__aeabi_dsub>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <Kalman+0xe4>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f7ff fbc0 	bl	80005f8 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <Kalman+0xe4>)
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]

    return X;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <Kalman+0xf8>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8000e90:	eef0 0a67 	vmov.f32	s1, s15
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	20000018 	.word	0x20000018
 8000eac:	3ff00000 	.word	0x3ff00000
 8000eb0:	20000020 	.word	0x20000020

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fc37 	bl	800172c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f837 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f9b1 	bl	8001228 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f891 	bl	8000fec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000eca:	f000 f983 	bl	80011d4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ece:	f000 f8df 	bl	8001090 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  initUart();
 8000ed2:	f000 fbaf 	bl	8001634 <initUart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <main+0x74>)
 8000ed8:	f000 fd02 	bl	80018e0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000edc:	2101      	movs	r1, #1
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <main+0x74>)
 8000ee0:	f000 fde5 	bl	8001aae <HAL_ADC_PollForConversion>
	  //변화�?� �??날 때까지 기다림
	  uint16_t value = HAL_ADC_GetValue(&hadc1);
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <main+0x74>)
 8000ee6:	f000 fe6d 	bl	8001bc4 <HAL_ADC_GetValue>
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	  //변환 �?�기
	  HAL_ADC_Stop(&hadc1);
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <main+0x74>)
 8000ef0:	f000 fdaa 	bl	8001a48 <HAL_ADC_Stop>
	  //종료
	  //uint16_t result = AvhFilter(value)
	  printf("%d %d %d\n\r", value, AvgFilter(value),(int)Kalman((double)value) );
 8000ef4:	88fc      	ldrh	r4, [r7, #6]
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff11 	bl	8000d20 <AvgFilter>
 8000efe:	4605      	mov	r5, r0
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fafe 	bl	8000504 <__aeabi_ui2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	ec43 2b10 	vmov	d0, r2, r3
 8000f10:	f7ff ff52 	bl	8000db8 <Kalman>
 8000f14:	4603      	mov	r3, r0
 8000f16:	462a      	mov	r2, r5
 8000f18:	4621      	mov	r1, r4
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <main+0x78>)
 8000f1c:	f003 fe50 	bl	8004bc0 <iprintf>
	  HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f000 fc75 	bl	8001810 <HAL_Delay>
  {
 8000f26:	e7d6      	b.n	8000ed6 <main+0x22>
 8000f28:	20000180 	.word	0x20000180
 8000f2c:	08005af4 	.word	0x08005af4

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fe36 	bl	8004bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fb73 	bl	800268c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fac:	f000 f956 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fdd6 	bl	8002b7c <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fd6:	f000 f941 	bl	800125c <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC1_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC1_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC1_Init+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_ADC1_Init+0x98>)
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC1_Init+0xa0>)
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC1_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	480e      	ldr	r0, [pc, #56]	; (8001084 <MX_ADC1_Init+0x98>)
 800104c:	f000 fc04 	bl	8001858 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 f901 	bl	800125c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	463b      	mov	r3, r7
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_ADC1_Init+0x98>)
 800106c:	f000 fdb8 	bl	8001be0 <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001076:	f000 f8f1 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000180 	.word	0x20000180
 8001088:	40012000 	.word	0x40012000
 800108c:	0f000001 	.word	0x0f000001

08001090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b096      	sub	sp, #88	; 0x58
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 fd71 	bl	8004bb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010d0:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <MX_TIM1_Init+0x140>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010d6:	220f      	movs	r2, #15
 80010d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b38      	ldr	r3, [pc, #224]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fa:	4834      	ldr	r0, [pc, #208]	; (80011cc <MX_TIM1_Init+0x13c>)
 80010fc:	f001 ff1e 	bl	8002f3c <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001106:	f000 f8a9 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001110:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001114:	4619      	mov	r1, r3
 8001116:	482d      	ldr	r0, [pc, #180]	; (80011cc <MX_TIM1_Init+0x13c>)
 8001118:	f002 f87a 	bl	8003210 <HAL_TIM_ConfigClockSource>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001122:	f000 f89b 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001126:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_TIM1_Init+0x13c>)
 8001128:	f001 ff57 	bl	8002fda <HAL_TIM_PWM_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001132:	f000 f893 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001142:	4619      	mov	r1, r3
 8001144:	4821      	ldr	r0, [pc, #132]	; (80011cc <MX_TIM1_Init+0x13c>)
 8001146:	f002 fbd1 	bl	80038ec <HAL_TIMEx_MasterConfigSynchronization>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001150:	f000 f884 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001154:	2360      	movs	r3, #96	; 0x60
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001158:	f240 13f3 	movw	r3, #499	; 0x1f3
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	4814      	ldr	r0, [pc, #80]	; (80011cc <MX_TIM1_Init+0x13c>)
 800117c:	f001 ff86 	bl	800308c <HAL_TIM_PWM_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001186:	f000 f869 	bl	800125c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x13c>)
 80011ae:	f002 fc0b 	bl	80039c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80011b8:	f000 f850 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x13c>)
 80011be:	f000 f8e1 	bl	8001384 <HAL_TIM_MspPostInit>

}
 80011c2:	bf00      	nop
 80011c4:	3758      	adds	r7, #88	; 0x58
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001c8 	.word	0x200001c8
 80011d0:	40010000 	.word	0x40010000

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f002 fc2e 	bl	8003a6c <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f821 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000210 	.word	0x20000210
 8001224:	40011000 	.word	0x40011000

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_GPIO_Init+0x30>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <MX_GPIO_Init+0x30>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_GPIO_Init+0x30>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_ADC_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_ADC_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_ADC_MspInit+0x80>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_ADC_MspInit+0x84>)
 8001326:	f001 f82d 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40012000 	.word	0x40012000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_TIM_Base_MspInit+0x3c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10d      	bne.n	800136e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_TIM_Base_MspInit+0x40>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x40>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_TIM_Base_MspInit+0x40>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_TIM_MspPostInit+0x68>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d11e      	bne.n	80013e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4619      	mov	r1, r3
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <HAL_TIM_MspPostInit+0x70>)
 80013e0:	f000 ffd0 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013e4:	bf00      	nop
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_UART_MspInit+0x94>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d134      	bne.n	8001484 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x98>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0x98>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001452:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <HAL_UART_MspInit+0x9c>)
 8001470:	f000 ff88 	bl	8002384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2025      	movs	r0, #37	; 0x25
 800147a:	f000 feba 	bl	80021f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147e:	2025      	movs	r0, #37	; 0x25
 8001480:	f000 fed3 	bl	800222a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40011000 	.word	0x40011000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f974 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <USART1_IRQHandler+0x10>)
 80014f2:	f002 fbcb 	bl	8003c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000210 	.word	0x20000210

08001500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:
  }
  return len;
}

int _close(int file)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001562:	605a      	str	r2, [r3, #4]
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f003 fac2 	bl	8004b5c <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	20000254 	.word	0x20000254
 800160c:	20000370 	.word	0x20000370

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <initUart>:
int rxBufferPp; //put pointer(write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

//uart 장치 초기화
void initUart() {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8001638:	2201      	movs	r2, #1
 800163a:	4903      	ldr	r1, [pc, #12]	; (8001648 <initUart+0x14>)
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <initUart+0x18>)
 800163e:	f002 faf4 	bl	8003c2a <HAL_UART_Receive_IT>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000035b 	.word	0x2000035b
 800164c:	20000210 	.word	0x20000210

08001650 <HAL_UART_RxCpltCallback>:

// 문자수신 처리
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_UART_RxCpltCallback+0x4c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	490f      	ldr	r1, [pc, #60]	; (800169c <HAL_UART_RxCpltCallback+0x4c>)
 8001660:	600a      	str	r2, [r1, #0]
 8001662:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_UART_RxCpltCallback+0x50>)
 8001664:	7811      	ldrb	r1, [r2, #0]
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_UART_RxCpltCallback+0x54>)
 8001668:	54d1      	strb	r1, [r2, r3]
	//buffer > 255면 다시 0 번지
	rxBufferPp %= rxBufferMax;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_UART_RxCpltCallback+0x4c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_UART_RxCpltCallback+0x58>)
 8001670:	fb83 1302 	smull	r1, r3, r3, r2
 8001674:	4413      	add	r3, r2
 8001676:	11d9      	asrs	r1, r3, #7
 8001678:	17d3      	asrs	r3, r2, #31
 800167a:	1ac9      	subs	r1, r1, r3
 800167c:	460b      	mov	r3, r1
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	1a5b      	subs	r3, r3, r1
 8001682:	1ad1      	subs	r1, r2, r3
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_UART_RxCpltCallback+0x4c>)
 8001686:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8001688:	2201      	movs	r2, #1
 800168a:	4905      	ldr	r1, [pc, #20]	; (80016a0 <HAL_UART_RxCpltCallback+0x50>)
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <HAL_UART_RxCpltCallback+0x5c>)
 800168e:	f002 facc 	bl	8003c2a <HAL_UART_Receive_IT>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000258 	.word	0x20000258
 80016a0:	2000035b 	.word	0x2000035b
 80016a4:	2000025c 	.word	0x2000025c
 80016a8:	80808081 	.word	0x80808081
 80016ac:	20000210 	.word	0x20000210

080016b0 <_write>:
	result = rxBuffer[rxBufferGp++];
	rxBufferGp %= 255;
	return result;
}

int _write(int file, char *p, int len) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 1);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	2301      	movs	r3, #1
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <_write+0x24>)
 80016c6:	f002 fa1e 	bl	8003b06 <HAL_UART_Transmit>
	return len;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000210 	.word	0x20000210

080016d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016de:	490e      	ldr	r1, [pc, #56]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016f4:	4c0b      	ldr	r4, [pc, #44]	; (8001724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001702:	f7ff ff85 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 fa2f 	bl	8004b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800170a:	f7ff fbd3 	bl	8000eb4 <main>
  bx  lr    
 800170e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001718:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800171c:	08005bc0 	.word	0x08005bc0
  ldr r2, =_sbss
 8001720:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001724:	20000370 	.word	0x20000370

08001728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001728:	e7fe      	b.n	8001728 <ADC_IRQHandler>
	...

0800172c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <HAL_Init+0x40>)
 8001736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_Init+0x40>)
 8001742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x40>)
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 fd41 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	200f      	movs	r0, #15
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7ff fd82 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fd59 	bl	8002246 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 fd21 	bl	80021f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000028 	.word	0x20000028
 80017c8:	20000030 	.word	0x20000030
 80017cc:	2000002c 	.word	0x2000002c

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000030 	.word	0x20000030
 80017f4:	2000035c 	.word	0x2000035c

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000035c 	.word	0x2000035c

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000030 	.word	0x20000030

08001858 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e033      	b.n	80018d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fd1e 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189e:	f023 0302 	bic.w	r3, r3, #2
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 faca 	bl	8001e44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
 80018c6:	e001      	b.n	80018cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Start+0x1a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e097      	b.n	8001a2a <HAL_ADC_Start+0x14a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d018      	beq.n	8001942 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <HAL_ADC_Start+0x158>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a45      	ldr	r2, [pc, #276]	; (8001a3c <HAL_ADC_Start+0x15c>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9a      	lsrs	r2, r3, #18
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001934:	e002      	b.n	800193c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d15f      	bne.n	8001a10 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800197a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198e:	d106      	bne.n	800199e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f023 0206 	bic.w	r2, r3, #6
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
 800199c:	e002      	b.n	80019a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_ADC_Start+0x160>)
 80019ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d129      	bne.n	8001a28 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e020      	b.n	8001a28 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <HAL_ADC_Start+0x164>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11b      	bne.n	8001a28 <HAL_ADC_Start+0x148>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d114      	bne.n	8001a28 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	e00b      	b.n	8001a28 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 0210 	orr.w	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000028 	.word	0x20000028
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	40012300 	.word	0x40012300
 8001a44:	40012000 	.word	0x40012000

08001a48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Stop+0x16>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e021      	b.n	8001aa2 <HAL_ADC_Stop+0x5a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	d113      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ada:	d10b      	bne.n	8001af4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e063      	b.n	8001bbc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001af4:	f7ff fe80 	bl	80017f8 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001afa:	e021      	b.n	8001b40 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d01d      	beq.n	8001b40 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x6c>
 8001b0a:	f7ff fe75 	bl	80017f8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d212      	bcs.n	8001b40 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d00b      	beq.n	8001b40 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0204 	orr.w	r2, r3, #4
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e03d      	b.n	8001bbc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d1d6      	bne.n	8001afc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f06f 0212 	mvn.w	r2, #18
 8001b56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d123      	bne.n	8001bba <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11f      	bne.n	8001bba <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d111      	bne.n	8001bba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e113      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x244>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	d925      	bls.n	8001c58 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68d9      	ldr	r1, [r3, #12]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b1e      	subs	r3, #30
 8001c22:	2207      	movs	r2, #7
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	400a      	ands	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68d9      	ldr	r1, [r3, #12]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	4603      	mov	r3, r0
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4403      	add	r3, r0
 8001c4a:	3b1e      	subs	r3, #30
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e022      	b.n	8001c9e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6919      	ldr	r1, [r3, #16]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4403      	add	r3, r0
 8001c94:	409a      	lsls	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d824      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b05      	subs	r3, #5
 8001cb8:	221f      	movs	r2, #31
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b05      	subs	r3, #5
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	635a      	str	r2, [r3, #52]	; 0x34
 8001cee:	e04c      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d824      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	3b23      	subs	r3, #35	; 0x23
 8001d0a:	221f      	movs	r2, #31
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43da      	mvns	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	400a      	ands	r2, r1
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3b23      	subs	r3, #35	; 0x23
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d40:	e023      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	3b41      	subs	r3, #65	; 0x41
 8001d54:	221f      	movs	r2, #31
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	400a      	ands	r2, r1
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4618      	mov	r0, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b41      	subs	r3, #65	; 0x41
 8001d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <HAL_ADC_ConfigChannel+0x250>)
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_ADC_ConfigChannel+0x254>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d10f      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1d8>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b12      	cmp	r3, #18
 8001d9e:	d10b      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_ADC_ConfigChannel+0x254>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12b      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x23a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_ADC_ConfigChannel+0x258>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b11      	cmp	r3, #17
 8001dd2:	d122      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_ADC_ConfigChannel+0x258>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d111      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_ADC_ConfigChannel+0x25c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_ADC_ConfigChannel+0x260>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0c9a      	lsrs	r2, r3, #18
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f9      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40012300 	.word	0x40012300
 8001e34:	40012000 	.word	0x40012000
 8001e38:	10000012 	.word	0x10000012
 8001e3c:	20000028 	.word	0x20000028
 8001e40:	431bde83 	.word	0x431bde83

08001e44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e4c:	4b79      	ldr	r3, [pc, #484]	; (8002034 <ADC_Init+0x1f0>)
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	021a      	lsls	r2, r3, #8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	4a58      	ldr	r2, [pc, #352]	; (8002038 <ADC_Init+0x1f4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d022      	beq.n	8001f22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6899      	ldr	r1, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e00f      	b.n	8001f42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0202 	bic.w	r2, r2, #2
 8001f50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6899      	ldr	r1, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7e1b      	ldrb	r3, [r3, #24]
 8001f5c:	005a      	lsls	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	035a      	lsls	r2, r3, #13
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e007      	b.n	8001fb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	051a      	lsls	r2, r3, #20
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ffa:	025a      	lsls	r2, r3, #9
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002012:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6899      	ldr	r1, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	029a      	lsls	r2, r3, #10
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40012300 	.word	0x40012300
 8002038:	0f000001 	.word	0x0f000001

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff29 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff3e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff fac4 	bl	80017f8 <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d008      	beq.n	8002290 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e052      	b.n	8002336 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0216 	bic.w	r2, r2, #22
 800229e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d103      	bne.n	80022c0 <HAL_DMA_Abort+0x62>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0208 	bic.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e0:	e013      	b.n	800230a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e2:	f7ff fa89 	bl	80017f8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d90c      	bls.n	800230a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e015      	b.n	8002336 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e4      	bne.n	80022e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	223f      	movs	r2, #63	; 0x3f
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d004      	beq.n	800235c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00c      	b.n	8002376 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2205      	movs	r2, #5
 8002360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e159      	b.n	8002654 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	f040 8148 	bne.w	800264e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d005      	beq.n	80023d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d130      	bne.n	8002438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0201 	and.w	r2, r3, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b03      	cmp	r3, #3
 8002442:	d017      	beq.n	8002474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d123      	bne.n	80024c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80a2 	beq.w	800264e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_GPIO_Init+0x2e8>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_GPIO_Init+0x2e8>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b54      	ldr	r3, [pc, #336]	; (800266c <HAL_GPIO_Init+0x2e8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002526:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_GPIO_Init+0x2ec>)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a49      	ldr	r2, [pc, #292]	; (8002674 <HAL_GPIO_Init+0x2f0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x202>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a48      	ldr	r2, [pc, #288]	; (8002678 <HAL_GPIO_Init+0x2f4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x1fe>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_GPIO_Init+0x2f8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x1fa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a46      	ldr	r2, [pc, #280]	; (8002680 <HAL_GPIO_Init+0x2fc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x1f6>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a45      	ldr	r2, [pc, #276]	; (8002684 <HAL_GPIO_Init+0x300>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x1f2>
 8002572:	2304      	movs	r3, #4
 8002574:	e008      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002576:	2307      	movs	r3, #7
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x204>
 800257a:	2303      	movs	r3, #3
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x204>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x204>
 8002586:	2300      	movs	r3, #0
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002598:	4935      	ldr	r1, [pc, #212]	; (8002670 <HAL_GPIO_Init+0x2ec>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_GPIO_Init+0x304>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ca:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_GPIO_Init+0x304>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_GPIO_Init+0x304>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_GPIO_Init+0x304>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_GPIO_Init+0x304>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261e:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_GPIO_Init+0x304>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_GPIO_Init+0x304>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_GPIO_Init+0x304>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	f67f aea2 	bls.w	80023a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800
 8002670:	40013800 	.word	0x40013800
 8002674:	40020000 	.word	0x40020000
 8002678:	40020400 	.word	0x40020400
 800267c:	40020800 	.word	0x40020800
 8002680:	40020c00 	.word	0x40020c00
 8002684:	40021000 	.word	0x40021000
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e267      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e242      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6f      	ldr	r2, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6c      	ldr	r2, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b69      	ldr	r3, [pc, #420]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a68      	ldr	r2, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff f858 	bl	80017f8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff f854 	bl	80017f8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e207      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f844 	bl	80017f8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f840 	bl	80017f8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1f3      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b51      	ldr	r3, [pc, #324]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c7      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x244>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fff9 	bl	80017f8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fff5 	bl	80017f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1a8      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x244>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe ffd8 	bl	80017f8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe ffd4 	bl	80017f8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e187      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x248>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe ffb8 	bl	80017f8 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe ffb4 	bl	80017f8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e167      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x240>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x248>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe ffa1 	bl	80017f8 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe ff9d 	bl	80017f8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e150      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
 8002912:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b77      	ldr	r3, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b74      	ldr	r3, [pc, #464]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a73      	ldr	r2, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe ff5d 	bl	80017f8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe ff59 	bl	80017f8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e10c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x2ea>
 8002968:	4b64      	ldr	r3, [pc, #400]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a63      	ldr	r2, [pc, #396]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x30c>
 800297e:	4b5f      	ldr	r3, [pc, #380]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5e      	ldr	r2, [pc, #376]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a5b      	ldr	r2, [pc, #364]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002998:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe ff1e 	bl	80017f8 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe ff1a 	bl	80017f8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0cb      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe ff08 	bl	80017f8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe ff04 	bl	80017f8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b5      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	4a38      	ldr	r2, [pc, #224]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a1 	beq.w	8002b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d05c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d141      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fed8 	bl	80017f8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fed4 	bl	80017f8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e087      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	491b      	ldr	r1, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fead 	bl	80017f8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fea9 	bl	80017f8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e05c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x416>
 8002ac0:	e054      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fe96 	bl	80017f8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fe92 	bl	80017f8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e045      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
 8002aee:	e03d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e038      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4ec>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d028      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d121      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fdc4 	bl	80017f8 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fdc0 	bl	80017f8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	; (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	; (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fd24 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08005b00 	.word	0x08005b00
 8002d40:	20000028 	.word	0x20000028
 8002d44:	2000002c 	.word	0x2000002c

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b090      	sub	sp, #64	; 0x40
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
 8002d54:	2300      	movs	r3, #0
 8002d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d58:	2300      	movs	r3, #0
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00d      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	f200 80a1 	bhi.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7a:	e09b      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d80:	e09b      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d86:	e098      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	627a      	str	r2, [r7, #36]	; 0x24
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002db0:	2100      	movs	r1, #0
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db4:	fb03 f201 	mul.w	r2, r3, r1
 8002db8:	2300      	movs	r3, #0
 8002dba:	fb00 f303 	mul.w	r3, r0, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc8:	460a      	mov	r2, r1
 8002dca:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	4413      	add	r3, r2
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	61fa      	str	r2, [r7, #28]
 8002dda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002de2:	f7fd fe1b 	bl	8000a1c <__aeabi_uldivmod>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4613      	mov	r3, r2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dee:	e053      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	2200      	movs	r2, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	617a      	str	r2, [r7, #20]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e02:	f04f 0b00 	mov.w	fp, #0
 8002e06:	4652      	mov	r2, sl
 8002e08:	465b      	mov	r3, fp
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	0159      	lsls	r1, r3, #5
 8002e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e18:	0150      	lsls	r0, r2, #5
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e22:	eb63 090b 	sbc.w	r9, r3, fp
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e3a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e3e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	00eb      	lsls	r3, r5, #3
 8002e4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e50:	00e2      	lsls	r2, r4, #3
 8002e52:	4614      	mov	r4, r2
 8002e54:	461d      	mov	r5, r3
 8002e56:	eb14 030a 	adds.w	r3, r4, sl
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	eb45 030b 	adc.w	r3, r5, fp
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6e:	4629      	mov	r1, r5
 8002e70:	028b      	lsls	r3, r1, #10
 8002e72:	4621      	mov	r1, r4
 8002e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e78:	4621      	mov	r1, r4
 8002e7a:	028a      	lsls	r2, r1, #10
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	2200      	movs	r2, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	60fa      	str	r2, [r7, #12]
 8002e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8c:	f7fd fdc6 	bl	8000a1c <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4613      	mov	r3, r2
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb2:	e002      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x184>)
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3740      	adds	r7, #64	; 0x40
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	017d7840 	.word	0x017d7840

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000028 	.word	0x20000028

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08005b10 	.word	0x08005b10

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08005b10 	.word	0x08005b10

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe f9ec 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fa10 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e041      	b.n	8003070 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f839 	bl	8003078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 f9c1 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0ae      	b.n	8003208 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	f200 809f 	bhi.w	80031f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	080031f9 	.word	0x080031f9
 80030c8:	080031f9 	.word	0x080031f9
 80030cc:	080031f9 	.word	0x080031f9
 80030d0:	08003135 	.word	0x08003135
 80030d4:	080031f9 	.word	0x080031f9
 80030d8:	080031f9 	.word	0x080031f9
 80030dc:	080031f9 	.word	0x080031f9
 80030e0:	08003177 	.word	0x08003177
 80030e4:	080031f9 	.word	0x080031f9
 80030e8:	080031f9 	.word	0x080031f9
 80030ec:	080031f9 	.word	0x080031f9
 80030f0:	080031b7 	.word	0x080031b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f9d0 	bl	80034a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0208 	orr.w	r2, r2, #8
 800310e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0204 	bic.w	r2, r2, #4
 800311e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6999      	ldr	r1, [r3, #24]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	619a      	str	r2, [r3, #24]
      break;
 8003132:	e064      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa16 	bl	800356c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6999      	ldr	r1, [r3, #24]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	619a      	str	r2, [r3, #24]
      break;
 8003174:	e043      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa61 	bl	8003644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0208 	orr.w	r2, r2, #8
 8003190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0204 	bic.w	r2, r2, #4
 80031a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69d9      	ldr	r1, [r3, #28]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	61da      	str	r2, [r3, #28]
      break;
 80031b4:	e023      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 faab 	bl	8003718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69d9      	ldr	r1, [r3, #28]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	61da      	str	r2, [r3, #28]
      break;
 80031f6:	e002      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
      break;
 80031fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIM_ConfigClockSource+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e0b4      	b.n	8003396 <HAL_TIM_ConfigClockSource+0x186>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003264:	d03e      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	f200 8087 	bhi.w	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	f000 8086 	beq.w	8003382 <HAL_TIM_ConfigClockSource+0x172>
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d87f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d01a      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d87b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d050      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x11a>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d877      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b50      	cmp	r3, #80	; 0x50
 800328e:	d03c      	beq.n	800330a <HAL_TIM_ConfigClockSource+0xfa>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d873      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d058      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x13a>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d86f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d064      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d86b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d060      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d867      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d05a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032b4:	e062      	b.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f000 faf1 	bl	80038ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e04f      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f000 fada 	bl	80038ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003306:	609a      	str	r2, [r3, #8]
      break;
 8003308:	e03c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	461a      	mov	r2, r3
 8003318:	f000 fa4e 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2150      	movs	r1, #80	; 0x50
 8003322:	4618      	mov	r0, r3
 8003324:	f000 faa7 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003328:	e02c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	461a      	mov	r2, r3
 8003338:	f000 fa6d 	bl	8003816 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2160      	movs	r1, #96	; 0x60
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fa97 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003348:	e01c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	461a      	mov	r2, r3
 8003358:	f000 fa2e 	bl	80037b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fa87 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003368:	e00c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f000 fa7e 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 800337a:	e003      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e000      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a34      	ldr	r2, [pc, #208]	; (8003484 <TIM_Base_SetConfig+0xe4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a31      	ldr	r2, [pc, #196]	; (8003488 <TIM_Base_SetConfig+0xe8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a30      	ldr	r2, [pc, #192]	; (800348c <TIM_Base_SetConfig+0xec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x38>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <TIM_Base_SetConfig+0xf0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a25      	ldr	r2, [pc, #148]	; (8003484 <TIM_Base_SetConfig+0xe4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01b      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d017      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a22      	ldr	r2, [pc, #136]	; (8003488 <TIM_Base_SetConfig+0xe8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <TIM_Base_SetConfig+0xec>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a20      	ldr	r2, [pc, #128]	; (8003490 <TIM_Base_SetConfig+0xf0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <TIM_Base_SetConfig+0xf4>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <TIM_Base_SetConfig+0xf8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1d      	ldr	r2, [pc, #116]	; (800349c <TIM_Base_SetConfig+0xfc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <TIM_Base_SetConfig+0xe4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40000c00 	.word	0x40000c00
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f023 0201 	bic.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0302 	bic.w	r3, r3, #2
 80034e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_OC1_SetConfig+0xc8>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0308 	bic.w	r3, r3, #8
 8003502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 0304 	bic.w	r3, r3, #4
 8003514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a13      	ldr	r2, [pc, #76]	; (8003568 <TIM_OC1_SetConfig+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d111      	bne.n	8003542 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800352c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40010000 	.word	0x40010000

0800356c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0210 	bic.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0320 	bic.w	r3, r3, #32
 80035b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <TIM_OC2_SetConfig+0xd4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10d      	bne.n	80035e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <TIM_OC2_SetConfig+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d113      	bne.n	8003618 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40010000 	.word	0x40010000

08003644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <TIM_OC3_SetConfig+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10d      	bne.n	80036be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <TIM_OC3_SetConfig+0xd0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d113      	bne.n	80036ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40010000 	.word	0x40010000

08003718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <TIM_OC4_SetConfig+0x9c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d109      	bne.n	800378c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800377e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000

080037b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 030a 	bic.w	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003816:	b480      	push	{r7}
 8003818:	b087      	sub	sp, #28
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0210 	bic.w	r2, r3, #16
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	031b      	lsls	r3, r3, #12
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	f043 0307 	orr.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	021a      	lsls	r2, r3, #8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	609a      	str	r2, [r3, #8]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003900:	2302      	movs	r3, #2
 8003902:	e050      	b.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d013      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10c      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	4313      	orrs	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40014000 	.word	0x40014000

080039c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e03d      	b.n	8003a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e03f      	b.n	8003afe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fcb0 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fddf 	bl	8004674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b08a      	sub	sp, #40	; 0x28
 8003b0a:	af02      	add	r7, sp, #8
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d17c      	bne.n	8003c20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_Transmit+0x2c>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e075      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x3e>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e06e      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fe4d 	bl	80017f8 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	88fa      	ldrh	r2, [r7, #6]
 8003b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d108      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d104      	bne.n	8003b88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e003      	b.n	8003b90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b98:	e02a      	b.n	8003bf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fb1f 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e036      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e007      	b.n	8003be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1cf      	bne.n	8003b9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2140      	movs	r1, #64	; 0x40
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 faef 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e006      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	4613      	mov	r3, r2
 8003c36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d11d      	bne.n	8003c80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_UART_Receive_IT+0x26>
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e016      	b.n	8003c82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Receive_IT+0x38>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e00f      	b.n	8003c82 <HAL_UART_Receive_IT+0x58>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fb24 	bl	80042c4 <UART_Start_Receive_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	e000      	b.n	8003c82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0ba      	sub	sp, #232	; 0xe8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x66>
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fc07 	bl	80044fe <UART_Receive_IT>
      return;
 8003cf0:	e256      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80de 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x22c>
 8003cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80d1 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_UART_IRQHandler+0xae>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_UART_IRQHandler+0xd2>
 8003d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_UART_IRQHandler+0xf6>
 8003d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d011      	beq.n	8003db2 <HAL_UART_IRQHandler+0x126>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0208 	orr.w	r2, r3, #8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 81ed 	beq.w	8004196 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_UART_IRQHandler+0x14e>
 8003dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb92 	bl	80044fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_UART_IRQHandler+0x17a>
 8003dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04f      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fa9a 	bl	8004340 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d141      	bne.n	8003e9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3314      	adds	r3, #20
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3314      	adds	r3, #20
 8003e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1d9      	bne.n	8003e1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	4a7d      	ldr	r2, [pc, #500]	; (8004068 <HAL_UART_IRQHandler+0x3dc>)
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fa5f 	bl	800233e <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00e      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f990 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e00a      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f98c 	bl	80041bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e006      	b.n	8003eb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f988 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003eb2:	e170      	b.n	8004196 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	bf00      	nop
    return;
 8003eb6:	e16e      	b.n	8004196 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 814a 	bne.w	8004156 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8143 	beq.w	8004156 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 813c 	beq.w	8004156 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	f040 80b4 	bne.w	800406c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8140 	beq.w	800419a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f080 8139 	bcs.w	800419a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	f000 8088 	beq.w	800404e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1d9      	bne.n	8003f3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3314      	adds	r3, #20
 8003faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e1      	bne.n	8003f8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800401c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004030:	65ba      	str	r2, [r7, #88]	; 0x58
 8004032:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e3      	bne.n	800400c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe f908 	bl	800225e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004056:	b29b      	uxth	r3, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8b6 	bl	80041d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004064:	e099      	b.n	800419a <HAL_UART_IRQHandler+0x50e>
 8004066:	bf00      	nop
 8004068:	08004407 	.word	0x08004407
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004074:	b29b      	uxth	r3, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 808b 	beq.w	800419e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8086 	beq.w	800419e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040b6:	647a      	str	r2, [r7, #68]	; 0x44
 80040b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3314      	adds	r3, #20
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	623b      	str	r3, [r7, #32]
   return(result);
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3314      	adds	r3, #20
 80040ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040ee:	633a      	str	r2, [r7, #48]	; 0x30
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e3      	bne.n	80040ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	330c      	adds	r3, #12
 8004116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004134:	61fa      	str	r2, [r7, #28]
 8004136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	617b      	str	r3, [r7, #20]
   return(result);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e3      	bne.n	8004110 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f83e 	bl	80041d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004154:	e023      	b.n	800419e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_UART_IRQHandler+0x4ea>
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f95d 	bl	800442e <UART_Transmit_IT>
    return;
 8004174:	e014      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00e      	beq.n	80041a0 <HAL_UART_IRQHandler+0x514>
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f99d 	bl	80044ce <UART_EndTransmit_IT>
    return;
 8004194:	e004      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
      return;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_UART_IRQHandler+0x514>
      return;
 800419e:	bf00      	nop
  }
}
 80041a0:	37e8      	adds	r7, #232	; 0xe8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop

080041a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b090      	sub	sp, #64	; 0x40
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	e050      	b.n	800429c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d04c      	beq.n	800429c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <UART_WaitOnFlagUntilTimeout+0x30>
 8004208:	f7fd faf6 	bl	80017f8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004214:	429a      	cmp	r2, r3
 8004216:	d241      	bcs.n	800429c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004238:	637a      	str	r2, [r7, #52]	; 0x34
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e5      	bne.n	8004218 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3314      	adds	r3, #20
 8004252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	613b      	str	r3, [r7, #16]
   return(result);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426c:	623a      	str	r2, [r7, #32]
 800426e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	69f9      	ldr	r1, [r7, #28]
 8004272:	6a3a      	ldr	r2, [r7, #32]
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	61bb      	str	r3, [r7, #24]
   return(result);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e5      	bne.n	800424c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e00f      	b.n	80042bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d09f      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3740      	adds	r7, #64	; 0x40
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2222      	movs	r2, #34	; 0x22
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004310:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 0220 	orr.w	r2, r2, #32
 8004330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004340:	b480      	push	{r7}
 8004342:	b095      	sub	sp, #84	; 0x54
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004368:	643a      	str	r2, [r7, #64]	; 0x40
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800436e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	61fb      	str	r3, [r7, #28]
   return(result);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800439c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e5      	bne.n	800437c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d119      	bne.n	80043ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d8:	61ba      	str	r2, [r7, #24]
 80043da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	613b      	str	r3, [r7, #16]
   return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e5      	bne.n	80043b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043fa:	bf00      	nop
 80043fc:	3754      	adds	r7, #84	; 0x54
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff fecb 	bl	80041bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b21      	cmp	r3, #33	; 0x21
 8004440:	d13e      	bne.n	80044c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444a:	d114      	bne.n	8004476 <UART_Transmit_IT+0x48>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d110      	bne.n	8004476 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004468:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	621a      	str	r2, [r3, #32]
 8004474:	e008      	b.n	8004488 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6211      	str	r1, [r2, #32]
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4619      	mov	r1, r3
 8004496:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10f      	bne.n	80044bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fe5a 	bl	80041a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b08c      	sub	sp, #48	; 0x30
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b22      	cmp	r3, #34	; 0x22
 8004510:	f040 80ab 	bne.w	800466a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d117      	bne.n	800454e <UART_Receive_IT+0x50>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d113      	bne.n	800454e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453c:	b29a      	uxth	r2, r3
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
 800454c:	e026      	b.n	800459c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004560:	d007      	beq.n	8004572 <UART_Receive_IT+0x74>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <UART_Receive_IT+0x82>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e008      	b.n	8004592 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4619      	mov	r1, r3
 80045aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d15a      	bne.n	8004666 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0220 	bic.w	r2, r2, #32
 80045be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d135      	bne.n	800465c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 0310 	bic.w	r3, r3, #16
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004616:	623a      	str	r2, [r7, #32]
 8004618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	61bb      	str	r3, [r7, #24]
   return(result);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d10a      	bne.n	800464e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fdbb 	bl	80041d0 <HAL_UARTEx_RxEventCallback>
 800465a:	e002      	b.n	8004662 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fc fff7 	bl	8001650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e002      	b.n	800466c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800466a:	2302      	movs	r3, #2
  }
}
 800466c:	4618      	mov	r0, r3
 800466e:	3730      	adds	r7, #48	; 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0c0      	sub	sp, #256	; 0x100
 800467a:	af00      	add	r7, sp, #0
 800467c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	ea40 0301 	orr.w	r3, r0, r1
 800469c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046cc:	f021 010c 	bic.w	r1, r1, #12
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046da:	430b      	orrs	r3, r1
 80046dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	6999      	ldr	r1, [r3, #24]
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	ea40 0301 	orr.w	r3, r0, r1
 80046fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <UART_SetConfig+0x2cc>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d005      	beq.n	8004714 <UART_SetConfig+0xa0>
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <UART_SetConfig+0x2d0>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d104      	bne.n	800471e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe fbfe 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004718:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800471c:	e003      	b.n	8004726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471e:	f7fe fbe5 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 8004722:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	f040 810c 	bne.w	800494c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800473e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	1891      	adds	r1, r2, r2
 800474c:	65b9      	str	r1, [r7, #88]	; 0x58
 800474e:	415b      	adcs	r3, r3
 8004750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004756:	4621      	mov	r1, r4
 8004758:	eb12 0801 	adds.w	r8, r2, r1
 800475c:	4629      	mov	r1, r5
 800475e:	eb43 0901 	adc.w	r9, r3, r1
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004776:	4690      	mov	r8, r2
 8004778:	4699      	mov	r9, r3
 800477a:	4623      	mov	r3, r4
 800477c:	eb18 0303 	adds.w	r3, r8, r3
 8004780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004784:	462b      	mov	r3, r5
 8004786:	eb49 0303 	adc.w	r3, r9, r3
 800478a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800479a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800479e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047a2:	460b      	mov	r3, r1
 80047a4:	18db      	adds	r3, r3, r3
 80047a6:	653b      	str	r3, [r7, #80]	; 0x50
 80047a8:	4613      	mov	r3, r2
 80047aa:	eb42 0303 	adc.w	r3, r2, r3
 80047ae:	657b      	str	r3, [r7, #84]	; 0x54
 80047b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047b8:	f7fc f930 	bl	8000a1c <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <UART_SetConfig+0x2d4>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011c      	lsls	r4, r3, #4
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80047e4:	415b      	adcs	r3, r3
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047ec:	4641      	mov	r1, r8
 80047ee:	eb12 0a01 	adds.w	sl, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb43 0b01 	adc.w	fp, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800480c:	4692      	mov	sl, r2
 800480e:	469b      	mov	fp, r3
 8004810:	4643      	mov	r3, r8
 8004812:	eb1a 0303 	adds.w	r3, sl, r3
 8004816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800481a:	464b      	mov	r3, r9
 800481c:	eb4b 0303 	adc.w	r3, fp, r3
 8004820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004830:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004838:	460b      	mov	r3, r1
 800483a:	18db      	adds	r3, r3, r3
 800483c:	643b      	str	r3, [r7, #64]	; 0x40
 800483e:	4613      	mov	r3, r2
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
 8004846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800484a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800484e:	f7fc f8e5 	bl	8000a1c <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4611      	mov	r1, r2
 8004858:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <UART_SetConfig+0x2d4>)
 800485a:	fba3 2301 	umull	r2, r3, r3, r1
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2264      	movs	r2, #100	; 0x64
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	1acb      	subs	r3, r1, r3
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <UART_SetConfig+0x2d4>)
 8004870:	fba3 2302 	umull	r2, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800487c:	441c      	add	r4, r3
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004888:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800488c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	63b9      	str	r1, [r7, #56]	; 0x38
 8004898:	415b      	adcs	r3, r3
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6339      	str	r1, [r7, #48]	; 0x30
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800490a:	f7fc f887 	bl	8000a1c <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UART_SetConfig+0x2d4>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <UART_SetConfig+0x2d4>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4422      	add	r2, r4
 800493a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800493c:	e105      	b.n	8004b4a <UART_SetConfig+0x4d6>
 800493e:	bf00      	nop
 8004940:	40011000 	.word	0x40011000
 8004944:	40011400 	.word	0x40011400
 8004948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004956:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800495a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	1891      	adds	r1, r2, r2
 8004964:	6239      	str	r1, [r7, #32]
 8004966:	415b      	adcs	r3, r3
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496e:	4641      	mov	r1, r8
 8004970:	1854      	adds	r4, r2, r1
 8004972:	4649      	mov	r1, r9
 8004974:	eb43 0501 	adc.w	r5, r3, r1
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	00eb      	lsls	r3, r5, #3
 8004982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004986:	00e2      	lsls	r2, r4, #3
 8004988:	4614      	mov	r4, r2
 800498a:	461d      	mov	r5, r3
 800498c:	4643      	mov	r3, r8
 800498e:	18e3      	adds	r3, r4, r3
 8004990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004994:	464b      	mov	r3, r9
 8004996:	eb45 0303 	adc.w	r3, r5, r3
 800499a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ba:	4629      	mov	r1, r5
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c4:	4621      	mov	r1, r4
 80049c6:	008a      	lsls	r2, r1, #2
 80049c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049cc:	f7fc f826 	bl	8000a1c <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b60      	ldr	r3, [pc, #384]	; (8004b58 <UART_SetConfig+0x4e4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	61b9      	str	r1, [r7, #24]
 80049f8:	415b      	adcs	r3, r3
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6139      	str	r1, [r7, #16]
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a58:	4649      	mov	r1, r9
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a62:	4641      	mov	r1, r8
 8004a64:	008a      	lsls	r2, r1, #2
 8004a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a6a:	f7fb ffd7 	bl	8000a1c <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	; 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	3332      	adds	r3, #50	; 0x32
 8004a86:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a92:	441c      	add	r4, r3
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1851      	adds	r1, r2, r1
 8004ab6:	6039      	str	r1, [r7, #0]
 8004ab8:	4649      	mov	r1, r9
 8004aba:	414b      	adcs	r3, r1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aca:	4659      	mov	r1, fp
 8004acc:	00cb      	lsls	r3, r1, #3
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	00ca      	lsls	r2, r1, #3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	4642      	mov	r2, r8
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	663b      	str	r3, [r7, #96]	; 0x60
 8004af8:	667a      	str	r2, [r7, #100]	; 0x64
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b06:	4649      	mov	r1, r9
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b10:	4641      	mov	r1, r8
 8004b12:	008a      	lsls	r2, r1, #2
 8004b14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b18:	f7fb ff80 	bl	8000a1c <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b22:	fba3 1302 	umull	r1, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2164      	movs	r1, #100	; 0x64
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	; 0x32
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4422      	add	r2, r4
 8004b48:	609a      	str	r2, [r3, #8]
}
 8004b4a:	bf00      	nop
 8004b4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	51eb851f 	.word	0x51eb851f

08004b5c <__errno>:
 8004b5c:	4b01      	ldr	r3, [pc, #4]	; (8004b64 <__errno+0x8>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	20000034 	.word	0x20000034

08004b68 <__libc_init_array>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ba0 <__libc_init_array+0x38>)
 8004b6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ba4 <__libc_init_array+0x3c>)
 8004b6e:	1b64      	subs	r4, r4, r5
 8004b70:	10a4      	asrs	r4, r4, #2
 8004b72:	2600      	movs	r6, #0
 8004b74:	42a6      	cmp	r6, r4
 8004b76:	d109      	bne.n	8004b8c <__libc_init_array+0x24>
 8004b78:	4d0b      	ldr	r5, [pc, #44]	; (8004ba8 <__libc_init_array+0x40>)
 8004b7a:	4c0c      	ldr	r4, [pc, #48]	; (8004bac <__libc_init_array+0x44>)
 8004b7c:	f000 ffae 	bl	8005adc <_init>
 8004b80:	1b64      	subs	r4, r4, r5
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	2600      	movs	r6, #0
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d105      	bne.n	8004b96 <__libc_init_array+0x2e>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b90:	4798      	blx	r3
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7ee      	b.n	8004b74 <__libc_init_array+0xc>
 8004b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b9a:	4798      	blx	r3
 8004b9c:	3601      	adds	r6, #1
 8004b9e:	e7f2      	b.n	8004b86 <__libc_init_array+0x1e>
 8004ba0:	08005bb8 	.word	0x08005bb8
 8004ba4:	08005bb8 	.word	0x08005bb8
 8004ba8:	08005bb8 	.word	0x08005bb8
 8004bac:	08005bbc 	.word	0x08005bbc

08004bb0 <memset>:
 8004bb0:	4402      	add	r2, r0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <iprintf>:
 8004bc0:	b40f      	push	{r0, r1, r2, r3}
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <iprintf+0x2c>)
 8004bc4:	b513      	push	{r0, r1, r4, lr}
 8004bc6:	681c      	ldr	r4, [r3, #0]
 8004bc8:	b124      	cbz	r4, 8004bd4 <iprintf+0x14>
 8004bca:	69a3      	ldr	r3, [r4, #24]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <iprintf+0x14>
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 f866 	bl	8004ca0 <__sinit>
 8004bd4:	ab05      	add	r3, sp, #20
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	68a1      	ldr	r1, [r4, #8]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f000 f9bd 	bl	8004f5c <_vfiprintf_r>
 8004be2:	b002      	add	sp, #8
 8004be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr
 8004bec:	20000034 	.word	0x20000034

08004bf0 <std>:
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bfe:	6083      	str	r3, [r0, #8]
 8004c00:	8181      	strh	r1, [r0, #12]
 8004c02:	6643      	str	r3, [r0, #100]	; 0x64
 8004c04:	81c2      	strh	r2, [r0, #14]
 8004c06:	6183      	str	r3, [r0, #24]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	305c      	adds	r0, #92	; 0x5c
 8004c0e:	f7ff ffcf 	bl	8004bb0 <memset>
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x38>)
 8004c14:	6263      	str	r3, [r4, #36]	; 0x24
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x3c>)
 8004c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <std+0x40>)
 8004c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <std+0x44>)
 8004c20:	6224      	str	r4, [r4, #32]
 8004c22:	6323      	str	r3, [r4, #48]	; 0x30
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	08005505 	.word	0x08005505
 8004c2c:	08005527 	.word	0x08005527
 8004c30:	0800555f 	.word	0x0800555f
 8004c34:	08005583 	.word	0x08005583

08004c38 <_cleanup_r>:
 8004c38:	4901      	ldr	r1, [pc, #4]	; (8004c40 <_cleanup_r+0x8>)
 8004c3a:	f000 b8af 	b.w	8004d9c <_fwalk_reent>
 8004c3e:	bf00      	nop
 8004c40:	0800585d 	.word	0x0800585d

08004c44 <__sfmoreglue>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	2268      	movs	r2, #104	; 0x68
 8004c48:	1e4d      	subs	r5, r1, #1
 8004c4a:	4355      	muls	r5, r2
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c52:	f000 f8e5 	bl	8004e20 <_malloc_r>
 8004c56:	4604      	mov	r4, r0
 8004c58:	b140      	cbz	r0, 8004c6c <__sfmoreglue+0x28>
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c60:	300c      	adds	r0, #12
 8004c62:	60a0      	str	r0, [r4, #8]
 8004c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c68:	f7ff ffa2 	bl	8004bb0 <memset>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}

08004c70 <__sfp_lock_acquire>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__sfp_lock_acquire+0x8>)
 8004c72:	f000 b8b3 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20000361 	.word	0x20000361

08004c7c <__sfp_lock_release>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__sfp_lock_release+0x8>)
 8004c7e:	f000 b8ae 	b.w	8004dde <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20000361 	.word	0x20000361

08004c88 <__sinit_lock_acquire>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__sinit_lock_acquire+0x8>)
 8004c8a:	f000 b8a7 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	20000362 	.word	0x20000362

08004c94 <__sinit_lock_release>:
 8004c94:	4801      	ldr	r0, [pc, #4]	; (8004c9c <__sinit_lock_release+0x8>)
 8004c96:	f000 b8a2 	b.w	8004dde <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	20000362 	.word	0x20000362

08004ca0 <__sinit>:
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f7ff fff0 	bl	8004c88 <__sinit_lock_acquire>
 8004ca8:	69a3      	ldr	r3, [r4, #24]
 8004caa:	b11b      	cbz	r3, 8004cb4 <__sinit+0x14>
 8004cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb0:	f7ff bff0 	b.w	8004c94 <__sinit_lock_release>
 8004cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <__sinit+0x68>)
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <__sinit+0x6c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	bf04      	itt	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	61a3      	streq	r3, [r4, #24]
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f000 f820 	bl	8004d10 <__sfp>
 8004cd0:	6060      	str	r0, [r4, #4]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f000 f81c 	bl	8004d10 <__sfp>
 8004cd8:	60a0      	str	r0, [r4, #8]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f818 	bl	8004d10 <__sfp>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	60e0      	str	r0, [r4, #12]
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	6860      	ldr	r0, [r4, #4]
 8004ce8:	f7ff ff82 	bl	8004bf0 <std>
 8004cec:	68a0      	ldr	r0, [r4, #8]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2109      	movs	r1, #9
 8004cf2:	f7ff ff7d 	bl	8004bf0 <std>
 8004cf6:	68e0      	ldr	r0, [r4, #12]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	2112      	movs	r1, #18
 8004cfc:	f7ff ff78 	bl	8004bf0 <std>
 8004d00:	2301      	movs	r3, #1
 8004d02:	61a3      	str	r3, [r4, #24]
 8004d04:	e7d2      	b.n	8004cac <__sinit+0xc>
 8004d06:	bf00      	nop
 8004d08:	08005b18 	.word	0x08005b18
 8004d0c:	08004c39 	.word	0x08004c39

08004d10 <__sfp>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	4607      	mov	r7, r0
 8004d14:	f7ff ffac 	bl	8004c70 <__sfp_lock_acquire>
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <__sfp+0x84>)
 8004d1a:	681e      	ldr	r6, [r3, #0]
 8004d1c:	69b3      	ldr	r3, [r6, #24]
 8004d1e:	b913      	cbnz	r3, 8004d26 <__sfp+0x16>
 8004d20:	4630      	mov	r0, r6
 8004d22:	f7ff ffbd 	bl	8004ca0 <__sinit>
 8004d26:	3648      	adds	r6, #72	; 0x48
 8004d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	d503      	bpl.n	8004d38 <__sfp+0x28>
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	b30b      	cbz	r3, 8004d78 <__sfp+0x68>
 8004d34:	6836      	ldr	r6, [r6, #0]
 8004d36:	e7f7      	b.n	8004d28 <__sfp+0x18>
 8004d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d3c:	b9d5      	cbnz	r5, 8004d74 <__sfp+0x64>
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <__sfp+0x88>)
 8004d40:	60e3      	str	r3, [r4, #12]
 8004d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d46:	6665      	str	r5, [r4, #100]	; 0x64
 8004d48:	f000 f847 	bl	8004dda <__retarget_lock_init_recursive>
 8004d4c:	f7ff ff96 	bl	8004c7c <__sfp_lock_release>
 8004d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d58:	6025      	str	r5, [r4, #0]
 8004d5a:	61a5      	str	r5, [r4, #24]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d64:	f7ff ff24 	bl	8004bb0 <memset>
 8004d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d70:	4620      	mov	r0, r4
 8004d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d74:	3468      	adds	r4, #104	; 0x68
 8004d76:	e7d9      	b.n	8004d2c <__sfp+0x1c>
 8004d78:	2104      	movs	r1, #4
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f7ff ff62 	bl	8004c44 <__sfmoreglue>
 8004d80:	4604      	mov	r4, r0
 8004d82:	6030      	str	r0, [r6, #0]
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d1d5      	bne.n	8004d34 <__sfp+0x24>
 8004d88:	f7ff ff78 	bl	8004c7c <__sfp_lock_release>
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	e7ee      	b.n	8004d70 <__sfp+0x60>
 8004d92:	bf00      	nop
 8004d94:	08005b18 	.word	0x08005b18
 8004d98:	ffff0001 	.word	0xffff0001

08004d9c <_fwalk_reent>:
 8004d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da0:	4606      	mov	r6, r0
 8004da2:	4688      	mov	r8, r1
 8004da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004da8:	2700      	movs	r7, #0
 8004daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dae:	f1b9 0901 	subs.w	r9, r9, #1
 8004db2:	d505      	bpl.n	8004dc0 <_fwalk_reent+0x24>
 8004db4:	6824      	ldr	r4, [r4, #0]
 8004db6:	2c00      	cmp	r4, #0
 8004db8:	d1f7      	bne.n	8004daa <_fwalk_reent+0xe>
 8004dba:	4638      	mov	r0, r7
 8004dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc0:	89ab      	ldrh	r3, [r5, #12]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d907      	bls.n	8004dd6 <_fwalk_reent+0x3a>
 8004dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	d003      	beq.n	8004dd6 <_fwalk_reent+0x3a>
 8004dce:	4629      	mov	r1, r5
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	47c0      	blx	r8
 8004dd4:	4307      	orrs	r7, r0
 8004dd6:	3568      	adds	r5, #104	; 0x68
 8004dd8:	e7e9      	b.n	8004dae <_fwalk_reent+0x12>

08004dda <__retarget_lock_init_recursive>:
 8004dda:	4770      	bx	lr

08004ddc <__retarget_lock_acquire_recursive>:
 8004ddc:	4770      	bx	lr

08004dde <__retarget_lock_release_recursive>:
 8004dde:	4770      	bx	lr

08004de0 <sbrk_aligned>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4e0e      	ldr	r6, [pc, #56]	; (8004e1c <sbrk_aligned+0x3c>)
 8004de4:	460c      	mov	r4, r1
 8004de6:	6831      	ldr	r1, [r6, #0]
 8004de8:	4605      	mov	r5, r0
 8004dea:	b911      	cbnz	r1, 8004df2 <sbrk_aligned+0x12>
 8004dec:	f000 fb7a 	bl	80054e4 <_sbrk_r>
 8004df0:	6030      	str	r0, [r6, #0]
 8004df2:	4621      	mov	r1, r4
 8004df4:	4628      	mov	r0, r5
 8004df6:	f000 fb75 	bl	80054e4 <_sbrk_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	d00a      	beq.n	8004e14 <sbrk_aligned+0x34>
 8004dfe:	1cc4      	adds	r4, r0, #3
 8004e00:	f024 0403 	bic.w	r4, r4, #3
 8004e04:	42a0      	cmp	r0, r4
 8004e06:	d007      	beq.n	8004e18 <sbrk_aligned+0x38>
 8004e08:	1a21      	subs	r1, r4, r0
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f000 fb6a 	bl	80054e4 <_sbrk_r>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d101      	bne.n	8004e18 <sbrk_aligned+0x38>
 8004e14:	f04f 34ff 	mov.w	r4, #4294967295
 8004e18:	4620      	mov	r0, r4
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	20000368 	.word	0x20000368

08004e20 <_malloc_r>:
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	1ccd      	adds	r5, r1, #3
 8004e26:	f025 0503 	bic.w	r5, r5, #3
 8004e2a:	3508      	adds	r5, #8
 8004e2c:	2d0c      	cmp	r5, #12
 8004e2e:	bf38      	it	cc
 8004e30:	250c      	movcc	r5, #12
 8004e32:	2d00      	cmp	r5, #0
 8004e34:	4607      	mov	r7, r0
 8004e36:	db01      	blt.n	8004e3c <_malloc_r+0x1c>
 8004e38:	42a9      	cmp	r1, r5
 8004e3a:	d905      	bls.n	8004e48 <_malloc_r+0x28>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	2600      	movs	r6, #0
 8004e42:	4630      	mov	r0, r6
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	4e2e      	ldr	r6, [pc, #184]	; (8004f04 <_malloc_r+0xe4>)
 8004e4a:	f000 fdbb 	bl	80059c4 <__malloc_lock>
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	461c      	mov	r4, r3
 8004e52:	bb34      	cbnz	r4, 8004ea2 <_malloc_r+0x82>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ffc2 	bl	8004de0 <sbrk_aligned>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	4604      	mov	r4, r0
 8004e60:	d14d      	bne.n	8004efe <_malloc_r+0xde>
 8004e62:	6834      	ldr	r4, [r6, #0]
 8004e64:	4626      	mov	r6, r4
 8004e66:	2e00      	cmp	r6, #0
 8004e68:	d140      	bne.n	8004eec <_malloc_r+0xcc>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4638      	mov	r0, r7
 8004e70:	eb04 0803 	add.w	r8, r4, r3
 8004e74:	f000 fb36 	bl	80054e4 <_sbrk_r>
 8004e78:	4580      	cmp	r8, r0
 8004e7a:	d13a      	bne.n	8004ef2 <_malloc_r+0xd2>
 8004e7c:	6821      	ldr	r1, [r4, #0]
 8004e7e:	3503      	adds	r5, #3
 8004e80:	1a6d      	subs	r5, r5, r1
 8004e82:	f025 0503 	bic.w	r5, r5, #3
 8004e86:	3508      	adds	r5, #8
 8004e88:	2d0c      	cmp	r5, #12
 8004e8a:	bf38      	it	cc
 8004e8c:	250c      	movcc	r5, #12
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ffa5 	bl	8004de0 <sbrk_aligned>
 8004e96:	3001      	adds	r0, #1
 8004e98:	d02b      	beq.n	8004ef2 <_malloc_r+0xd2>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	442b      	add	r3, r5
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	e00e      	b.n	8004ec0 <_malloc_r+0xa0>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	1b52      	subs	r2, r2, r5
 8004ea6:	d41e      	bmi.n	8004ee6 <_malloc_r+0xc6>
 8004ea8:	2a0b      	cmp	r2, #11
 8004eaa:	d916      	bls.n	8004eda <_malloc_r+0xba>
 8004eac:	1961      	adds	r1, r4, r5
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	6025      	str	r5, [r4, #0]
 8004eb2:	bf18      	it	ne
 8004eb4:	6059      	strne	r1, [r3, #4]
 8004eb6:	6863      	ldr	r3, [r4, #4]
 8004eb8:	bf08      	it	eq
 8004eba:	6031      	streq	r1, [r6, #0]
 8004ebc:	5162      	str	r2, [r4, r5]
 8004ebe:	604b      	str	r3, [r1, #4]
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f104 060b 	add.w	r6, r4, #11
 8004ec6:	f000 fd83 	bl	80059d0 <__malloc_unlock>
 8004eca:	f026 0607 	bic.w	r6, r6, #7
 8004ece:	1d23      	adds	r3, r4, #4
 8004ed0:	1af2      	subs	r2, r6, r3
 8004ed2:	d0b6      	beq.n	8004e42 <_malloc_r+0x22>
 8004ed4:	1b9b      	subs	r3, r3, r6
 8004ed6:	50a3      	str	r3, [r4, r2]
 8004ed8:	e7b3      	b.n	8004e42 <_malloc_r+0x22>
 8004eda:	6862      	ldr	r2, [r4, #4]
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	bf0c      	ite	eq
 8004ee0:	6032      	streq	r2, [r6, #0]
 8004ee2:	605a      	strne	r2, [r3, #4]
 8004ee4:	e7ec      	b.n	8004ec0 <_malloc_r+0xa0>
 8004ee6:	4623      	mov	r3, r4
 8004ee8:	6864      	ldr	r4, [r4, #4]
 8004eea:	e7b2      	b.n	8004e52 <_malloc_r+0x32>
 8004eec:	4634      	mov	r4, r6
 8004eee:	6876      	ldr	r6, [r6, #4]
 8004ef0:	e7b9      	b.n	8004e66 <_malloc_r+0x46>
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f000 fd6a 	bl	80059d0 <__malloc_unlock>
 8004efc:	e7a1      	b.n	8004e42 <_malloc_r+0x22>
 8004efe:	6025      	str	r5, [r4, #0]
 8004f00:	e7de      	b.n	8004ec0 <_malloc_r+0xa0>
 8004f02:	bf00      	nop
 8004f04:	20000364 	.word	0x20000364

08004f08 <__sfputc_r>:
 8004f08:	6893      	ldr	r3, [r2, #8]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	b410      	push	{r4}
 8004f10:	6093      	str	r3, [r2, #8]
 8004f12:	da08      	bge.n	8004f26 <__sfputc_r+0x1e>
 8004f14:	6994      	ldr	r4, [r2, #24]
 8004f16:	42a3      	cmp	r3, r4
 8004f18:	db01      	blt.n	8004f1e <__sfputc_r+0x16>
 8004f1a:	290a      	cmp	r1, #10
 8004f1c:	d103      	bne.n	8004f26 <__sfputc_r+0x1e>
 8004f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f22:	f000 bb33 	b.w	800558c <__swbuf_r>
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	1c58      	adds	r0, r3, #1
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	7019      	strb	r1, [r3, #0]
 8004f2e:	4608      	mov	r0, r1
 8004f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <__sfputs_r>:
 8004f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f38:	4606      	mov	r6, r0
 8004f3a:	460f      	mov	r7, r1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	18d5      	adds	r5, r2, r3
 8004f40:	42ac      	cmp	r4, r5
 8004f42:	d101      	bne.n	8004f48 <__sfputs_r+0x12>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e007      	b.n	8004f58 <__sfputs_r+0x22>
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff ffda 	bl	8004f08 <__sfputc_r>
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	d1f3      	bne.n	8004f40 <__sfputs_r+0xa>
 8004f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f5c <_vfiprintf_r>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	460d      	mov	r5, r1
 8004f62:	b09d      	sub	sp, #116	; 0x74
 8004f64:	4614      	mov	r4, r2
 8004f66:	4698      	mov	r8, r3
 8004f68:	4606      	mov	r6, r0
 8004f6a:	b118      	cbz	r0, 8004f74 <_vfiprintf_r+0x18>
 8004f6c:	6983      	ldr	r3, [r0, #24]
 8004f6e:	b90b      	cbnz	r3, 8004f74 <_vfiprintf_r+0x18>
 8004f70:	f7ff fe96 	bl	8004ca0 <__sinit>
 8004f74:	4b89      	ldr	r3, [pc, #548]	; (800519c <_vfiprintf_r+0x240>)
 8004f76:	429d      	cmp	r5, r3
 8004f78:	d11b      	bne.n	8004fb2 <_vfiprintf_r+0x56>
 8004f7a:	6875      	ldr	r5, [r6, #4]
 8004f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	d405      	bmi.n	8004f8e <_vfiprintf_r+0x32>
 8004f82:	89ab      	ldrh	r3, [r5, #12]
 8004f84:	059a      	lsls	r2, r3, #22
 8004f86:	d402      	bmi.n	8004f8e <_vfiprintf_r+0x32>
 8004f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f8a:	f7ff ff27 	bl	8004ddc <__retarget_lock_acquire_recursive>
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	d501      	bpl.n	8004f98 <_vfiprintf_r+0x3c>
 8004f94:	692b      	ldr	r3, [r5, #16]
 8004f96:	b9eb      	cbnz	r3, 8004fd4 <_vfiprintf_r+0x78>
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 fb5a 	bl	8005654 <__swsetup_r>
 8004fa0:	b1c0      	cbz	r0, 8004fd4 <_vfiprintf_r+0x78>
 8004fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fa4:	07dc      	lsls	r4, r3, #31
 8004fa6:	d50e      	bpl.n	8004fc6 <_vfiprintf_r+0x6a>
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	b01d      	add	sp, #116	; 0x74
 8004fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb2:	4b7b      	ldr	r3, [pc, #492]	; (80051a0 <_vfiprintf_r+0x244>)
 8004fb4:	429d      	cmp	r5, r3
 8004fb6:	d101      	bne.n	8004fbc <_vfiprintf_r+0x60>
 8004fb8:	68b5      	ldr	r5, [r6, #8]
 8004fba:	e7df      	b.n	8004f7c <_vfiprintf_r+0x20>
 8004fbc:	4b79      	ldr	r3, [pc, #484]	; (80051a4 <_vfiprintf_r+0x248>)
 8004fbe:	429d      	cmp	r5, r3
 8004fc0:	bf08      	it	eq
 8004fc2:	68f5      	ldreq	r5, [r6, #12]
 8004fc4:	e7da      	b.n	8004f7c <_vfiprintf_r+0x20>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	0598      	lsls	r0, r3, #22
 8004fca:	d4ed      	bmi.n	8004fa8 <_vfiprintf_r+0x4c>
 8004fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fce:	f7ff ff06 	bl	8004dde <__retarget_lock_release_recursive>
 8004fd2:	e7e9      	b.n	8004fa8 <_vfiprintf_r+0x4c>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe2:	2330      	movs	r3, #48	; 0x30
 8004fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051a8 <_vfiprintf_r+0x24c>
 8004fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fec:	f04f 0901 	mov.w	r9, #1
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff8:	b10a      	cbz	r2, 8004ffe <_vfiprintf_r+0xa2>
 8004ffa:	2a25      	cmp	r2, #37	; 0x25
 8004ffc:	d1f9      	bne.n	8004ff2 <_vfiprintf_r+0x96>
 8004ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8005002:	d00b      	beq.n	800501c <_vfiprintf_r+0xc0>
 8005004:	465b      	mov	r3, fp
 8005006:	4622      	mov	r2, r4
 8005008:	4629      	mov	r1, r5
 800500a:	4630      	mov	r0, r6
 800500c:	f7ff ff93 	bl	8004f36 <__sfputs_r>
 8005010:	3001      	adds	r0, #1
 8005012:	f000 80aa 	beq.w	800516a <_vfiprintf_r+0x20e>
 8005016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005018:	445a      	add	r2, fp
 800501a:	9209      	str	r2, [sp, #36]	; 0x24
 800501c:	f89a 3000 	ldrb.w	r3, [sl]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a2 	beq.w	800516a <_vfiprintf_r+0x20e>
 8005026:	2300      	movs	r3, #0
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005030:	f10a 0a01 	add.w	sl, sl, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800503c:	931a      	str	r3, [sp, #104]	; 0x68
 800503e:	4654      	mov	r4, sl
 8005040:	2205      	movs	r2, #5
 8005042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005046:	4858      	ldr	r0, [pc, #352]	; (80051a8 <_vfiprintf_r+0x24c>)
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	9a04      	ldr	r2, [sp, #16]
 800504e:	b9d8      	cbnz	r0, 8005088 <_vfiprintf_r+0x12c>
 8005050:	06d1      	lsls	r1, r2, #27
 8005052:	bf44      	itt	mi
 8005054:	2320      	movmi	r3, #32
 8005056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800505a:	0713      	lsls	r3, r2, #28
 800505c:	bf44      	itt	mi
 800505e:	232b      	movmi	r3, #43	; 0x2b
 8005060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005064:	f89a 3000 	ldrb.w	r3, [sl]
 8005068:	2b2a      	cmp	r3, #42	; 0x2a
 800506a:	d015      	beq.n	8005098 <_vfiprintf_r+0x13c>
 800506c:	9a07      	ldr	r2, [sp, #28]
 800506e:	4654      	mov	r4, sl
 8005070:	2000      	movs	r0, #0
 8005072:	f04f 0c0a 	mov.w	ip, #10
 8005076:	4621      	mov	r1, r4
 8005078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800507c:	3b30      	subs	r3, #48	; 0x30
 800507e:	2b09      	cmp	r3, #9
 8005080:	d94e      	bls.n	8005120 <_vfiprintf_r+0x1c4>
 8005082:	b1b0      	cbz	r0, 80050b2 <_vfiprintf_r+0x156>
 8005084:	9207      	str	r2, [sp, #28]
 8005086:	e014      	b.n	80050b2 <_vfiprintf_r+0x156>
 8005088:	eba0 0308 	sub.w	r3, r0, r8
 800508c:	fa09 f303 	lsl.w	r3, r9, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	46a2      	mov	sl, r4
 8005096:	e7d2      	b.n	800503e <_vfiprintf_r+0xe2>
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	1d19      	adds	r1, r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	9103      	str	r1, [sp, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bfbb      	ittet	lt
 80050a4:	425b      	neglt	r3, r3
 80050a6:	f042 0202 	orrlt.w	r2, r2, #2
 80050aa:	9307      	strge	r3, [sp, #28]
 80050ac:	9307      	strlt	r3, [sp, #28]
 80050ae:	bfb8      	it	lt
 80050b0:	9204      	strlt	r2, [sp, #16]
 80050b2:	7823      	ldrb	r3, [r4, #0]
 80050b4:	2b2e      	cmp	r3, #46	; 0x2e
 80050b6:	d10c      	bne.n	80050d2 <_vfiprintf_r+0x176>
 80050b8:	7863      	ldrb	r3, [r4, #1]
 80050ba:	2b2a      	cmp	r3, #42	; 0x2a
 80050bc:	d135      	bne.n	800512a <_vfiprintf_r+0x1ce>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfb8      	it	lt
 80050ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ce:	3402      	adds	r4, #2
 80050d0:	9305      	str	r3, [sp, #20]
 80050d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80051b8 <_vfiprintf_r+0x25c>
 80050d6:	7821      	ldrb	r1, [r4, #0]
 80050d8:	2203      	movs	r2, #3
 80050da:	4650      	mov	r0, sl
 80050dc:	f7fb f880 	bl	80001e0 <memchr>
 80050e0:	b140      	cbz	r0, 80050f4 <_vfiprintf_r+0x198>
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	eba0 000a 	sub.w	r0, r0, sl
 80050e8:	fa03 f000 	lsl.w	r0, r3, r0
 80050ec:	9b04      	ldr	r3, [sp, #16]
 80050ee:	4303      	orrs	r3, r0
 80050f0:	3401      	adds	r4, #1
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	482c      	ldr	r0, [pc, #176]	; (80051ac <_vfiprintf_r+0x250>)
 80050fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050fe:	2206      	movs	r2, #6
 8005100:	f7fb f86e 	bl	80001e0 <memchr>
 8005104:	2800      	cmp	r0, #0
 8005106:	d03f      	beq.n	8005188 <_vfiprintf_r+0x22c>
 8005108:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <_vfiprintf_r+0x254>)
 800510a:	bb1b      	cbnz	r3, 8005154 <_vfiprintf_r+0x1f8>
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	3307      	adds	r3, #7
 8005110:	f023 0307 	bic.w	r3, r3, #7
 8005114:	3308      	adds	r3, #8
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511a:	443b      	add	r3, r7
 800511c:	9309      	str	r3, [sp, #36]	; 0x24
 800511e:	e767      	b.n	8004ff0 <_vfiprintf_r+0x94>
 8005120:	fb0c 3202 	mla	r2, ip, r2, r3
 8005124:	460c      	mov	r4, r1
 8005126:	2001      	movs	r0, #1
 8005128:	e7a5      	b.n	8005076 <_vfiprintf_r+0x11a>
 800512a:	2300      	movs	r3, #0
 800512c:	3401      	adds	r4, #1
 800512e:	9305      	str	r3, [sp, #20]
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 0c0a 	mov.w	ip, #10
 8005136:	4620      	mov	r0, r4
 8005138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800513c:	3a30      	subs	r2, #48	; 0x30
 800513e:	2a09      	cmp	r2, #9
 8005140:	d903      	bls.n	800514a <_vfiprintf_r+0x1ee>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0c5      	beq.n	80050d2 <_vfiprintf_r+0x176>
 8005146:	9105      	str	r1, [sp, #20]
 8005148:	e7c3      	b.n	80050d2 <_vfiprintf_r+0x176>
 800514a:	fb0c 2101 	mla	r1, ip, r1, r2
 800514e:	4604      	mov	r4, r0
 8005150:	2301      	movs	r3, #1
 8005152:	e7f0      	b.n	8005136 <_vfiprintf_r+0x1da>
 8005154:	ab03      	add	r3, sp, #12
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	462a      	mov	r2, r5
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <_vfiprintf_r+0x258>)
 800515c:	a904      	add	r1, sp, #16
 800515e:	4630      	mov	r0, r6
 8005160:	f3af 8000 	nop.w
 8005164:	4607      	mov	r7, r0
 8005166:	1c78      	adds	r0, r7, #1
 8005168:	d1d6      	bne.n	8005118 <_vfiprintf_r+0x1bc>
 800516a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516c:	07d9      	lsls	r1, r3, #31
 800516e:	d405      	bmi.n	800517c <_vfiprintf_r+0x220>
 8005170:	89ab      	ldrh	r3, [r5, #12]
 8005172:	059a      	lsls	r2, r3, #22
 8005174:	d402      	bmi.n	800517c <_vfiprintf_r+0x220>
 8005176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005178:	f7ff fe31 	bl	8004dde <__retarget_lock_release_recursive>
 800517c:	89ab      	ldrh	r3, [r5, #12]
 800517e:	065b      	lsls	r3, r3, #25
 8005180:	f53f af12 	bmi.w	8004fa8 <_vfiprintf_r+0x4c>
 8005184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005186:	e711      	b.n	8004fac <_vfiprintf_r+0x50>
 8005188:	ab03      	add	r3, sp, #12
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	462a      	mov	r2, r5
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_vfiprintf_r+0x258>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	4630      	mov	r0, r6
 8005194:	f000 f880 	bl	8005298 <_printf_i>
 8005198:	e7e4      	b.n	8005164 <_vfiprintf_r+0x208>
 800519a:	bf00      	nop
 800519c:	08005b3c 	.word	0x08005b3c
 80051a0:	08005b5c 	.word	0x08005b5c
 80051a4:	08005b1c 	.word	0x08005b1c
 80051a8:	08005b7c 	.word	0x08005b7c
 80051ac:	08005b86 	.word	0x08005b86
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f37 	.word	0x08004f37
 80051b8:	08005b82 	.word	0x08005b82

080051bc <_printf_common>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	4616      	mov	r6, r2
 80051c2:	4699      	mov	r9, r3
 80051c4:	688a      	ldr	r2, [r1, #8]
 80051c6:	690b      	ldr	r3, [r1, #16]
 80051c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bfb8      	it	lt
 80051d0:	4613      	movlt	r3, r2
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d8:	4607      	mov	r7, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	b10a      	cbz	r2, 80051e2 <_printf_common+0x26>
 80051de:	3301      	adds	r3, #1
 80051e0:	6033      	str	r3, [r6, #0]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0699      	lsls	r1, r3, #26
 80051e6:	bf42      	ittt	mi
 80051e8:	6833      	ldrmi	r3, [r6, #0]
 80051ea:	3302      	addmi	r3, #2
 80051ec:	6033      	strmi	r3, [r6, #0]
 80051ee:	6825      	ldr	r5, [r4, #0]
 80051f0:	f015 0506 	ands.w	r5, r5, #6
 80051f4:	d106      	bne.n	8005204 <_printf_common+0x48>
 80051f6:	f104 0a19 	add.w	sl, r4, #25
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	6832      	ldr	r2, [r6, #0]
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	42ab      	cmp	r3, r5
 8005202:	dc26      	bgt.n	8005252 <_printf_common+0x96>
 8005204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005208:	1e13      	subs	r3, r2, #0
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	bf18      	it	ne
 800520e:	2301      	movne	r3, #1
 8005210:	0692      	lsls	r2, r2, #26
 8005212:	d42b      	bmi.n	800526c <_printf_common+0xb0>
 8005214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005218:	4649      	mov	r1, r9
 800521a:	4638      	mov	r0, r7
 800521c:	47c0      	blx	r8
 800521e:	3001      	adds	r0, #1
 8005220:	d01e      	beq.n	8005260 <_printf_common+0xa4>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	68e5      	ldr	r5, [r4, #12]
 8005226:	6832      	ldr	r2, [r6, #0]
 8005228:	f003 0306 	and.w	r3, r3, #6
 800522c:	2b04      	cmp	r3, #4
 800522e:	bf08      	it	eq
 8005230:	1aad      	subeq	r5, r5, r2
 8005232:	68a3      	ldr	r3, [r4, #8]
 8005234:	6922      	ldr	r2, [r4, #16]
 8005236:	bf0c      	ite	eq
 8005238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800523c:	2500      	movne	r5, #0
 800523e:	4293      	cmp	r3, r2
 8005240:	bfc4      	itt	gt
 8005242:	1a9b      	subgt	r3, r3, r2
 8005244:	18ed      	addgt	r5, r5, r3
 8005246:	2600      	movs	r6, #0
 8005248:	341a      	adds	r4, #26
 800524a:	42b5      	cmp	r5, r6
 800524c:	d11a      	bne.n	8005284 <_printf_common+0xc8>
 800524e:	2000      	movs	r0, #0
 8005250:	e008      	b.n	8005264 <_printf_common+0xa8>
 8005252:	2301      	movs	r3, #1
 8005254:	4652      	mov	r2, sl
 8005256:	4649      	mov	r1, r9
 8005258:	4638      	mov	r0, r7
 800525a:	47c0      	blx	r8
 800525c:	3001      	adds	r0, #1
 800525e:	d103      	bne.n	8005268 <_printf_common+0xac>
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	3501      	adds	r5, #1
 800526a:	e7c6      	b.n	80051fa <_printf_common+0x3e>
 800526c:	18e1      	adds	r1, r4, r3
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	2030      	movs	r0, #48	; 0x30
 8005272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005276:	4422      	add	r2, r4
 8005278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800527c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005280:	3302      	adds	r3, #2
 8005282:	e7c7      	b.n	8005214 <_printf_common+0x58>
 8005284:	2301      	movs	r3, #1
 8005286:	4622      	mov	r2, r4
 8005288:	4649      	mov	r1, r9
 800528a:	4638      	mov	r0, r7
 800528c:	47c0      	blx	r8
 800528e:	3001      	adds	r0, #1
 8005290:	d0e6      	beq.n	8005260 <_printf_common+0xa4>
 8005292:	3601      	adds	r6, #1
 8005294:	e7d9      	b.n	800524a <_printf_common+0x8e>
	...

08005298 <_printf_i>:
 8005298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	7e0f      	ldrb	r7, [r1, #24]
 800529e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a0:	2f78      	cmp	r7, #120	; 0x78
 80052a2:	4691      	mov	r9, r2
 80052a4:	4680      	mov	r8, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	469a      	mov	sl, r3
 80052aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052ae:	d807      	bhi.n	80052c0 <_printf_i+0x28>
 80052b0:	2f62      	cmp	r7, #98	; 0x62
 80052b2:	d80a      	bhi.n	80052ca <_printf_i+0x32>
 80052b4:	2f00      	cmp	r7, #0
 80052b6:	f000 80d8 	beq.w	800546a <_printf_i+0x1d2>
 80052ba:	2f58      	cmp	r7, #88	; 0x58
 80052bc:	f000 80a3 	beq.w	8005406 <_printf_i+0x16e>
 80052c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052c8:	e03a      	b.n	8005340 <_printf_i+0xa8>
 80052ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ce:	2b15      	cmp	r3, #21
 80052d0:	d8f6      	bhi.n	80052c0 <_printf_i+0x28>
 80052d2:	a101      	add	r1, pc, #4	; (adr r1, 80052d8 <_printf_i+0x40>)
 80052d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d8:	08005331 	.word	0x08005331
 80052dc:	08005345 	.word	0x08005345
 80052e0:	080052c1 	.word	0x080052c1
 80052e4:	080052c1 	.word	0x080052c1
 80052e8:	080052c1 	.word	0x080052c1
 80052ec:	080052c1 	.word	0x080052c1
 80052f0:	08005345 	.word	0x08005345
 80052f4:	080052c1 	.word	0x080052c1
 80052f8:	080052c1 	.word	0x080052c1
 80052fc:	080052c1 	.word	0x080052c1
 8005300:	080052c1 	.word	0x080052c1
 8005304:	08005451 	.word	0x08005451
 8005308:	08005375 	.word	0x08005375
 800530c:	08005433 	.word	0x08005433
 8005310:	080052c1 	.word	0x080052c1
 8005314:	080052c1 	.word	0x080052c1
 8005318:	08005473 	.word	0x08005473
 800531c:	080052c1 	.word	0x080052c1
 8005320:	08005375 	.word	0x08005375
 8005324:	080052c1 	.word	0x080052c1
 8005328:	080052c1 	.word	0x080052c1
 800532c:	0800543b 	.word	0x0800543b
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	1d1a      	adds	r2, r3, #4
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	602a      	str	r2, [r5, #0]
 8005338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800533c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005340:	2301      	movs	r3, #1
 8005342:	e0a3      	b.n	800548c <_printf_i+0x1f4>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	6829      	ldr	r1, [r5, #0]
 8005348:	0606      	lsls	r6, r0, #24
 800534a:	f101 0304 	add.w	r3, r1, #4
 800534e:	d50a      	bpl.n	8005366 <_printf_i+0xce>
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	2e00      	cmp	r6, #0
 8005356:	da03      	bge.n	8005360 <_printf_i+0xc8>
 8005358:	232d      	movs	r3, #45	; 0x2d
 800535a:	4276      	negs	r6, r6
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005360:	485e      	ldr	r0, [pc, #376]	; (80054dc <_printf_i+0x244>)
 8005362:	230a      	movs	r3, #10
 8005364:	e019      	b.n	800539a <_printf_i+0x102>
 8005366:	680e      	ldr	r6, [r1, #0]
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800536e:	bf18      	it	ne
 8005370:	b236      	sxthne	r6, r6
 8005372:	e7ef      	b.n	8005354 <_printf_i+0xbc>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	0601      	lsls	r1, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xec>
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	e002      	b.n	800538a <_printf_i+0xf2>
 8005384:	0646      	lsls	r6, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xe8>
 8005388:	881e      	ldrh	r6, [r3, #0]
 800538a:	4854      	ldr	r0, [pc, #336]	; (80054dc <_printf_i+0x244>)
 800538c:	2f6f      	cmp	r7, #111	; 0x6f
 800538e:	bf0c      	ite	eq
 8005390:	2308      	moveq	r3, #8
 8005392:	230a      	movne	r3, #10
 8005394:	2100      	movs	r1, #0
 8005396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539a:	6865      	ldr	r5, [r4, #4]
 800539c:	60a5      	str	r5, [r4, #8]
 800539e:	2d00      	cmp	r5, #0
 80053a0:	bfa2      	ittt	ge
 80053a2:	6821      	ldrge	r1, [r4, #0]
 80053a4:	f021 0104 	bicge.w	r1, r1, #4
 80053a8:	6021      	strge	r1, [r4, #0]
 80053aa:	b90e      	cbnz	r6, 80053b0 <_printf_i+0x118>
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d04d      	beq.n	800544c <_printf_i+0x1b4>
 80053b0:	4615      	mov	r5, r2
 80053b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ba:	5dc7      	ldrb	r7, [r0, r7]
 80053bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c0:	4637      	mov	r7, r6
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	460e      	mov	r6, r1
 80053c6:	d9f4      	bls.n	80053b2 <_printf_i+0x11a>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10b      	bne.n	80053e4 <_printf_i+0x14c>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	07de      	lsls	r6, r3, #31
 80053d0:	d508      	bpl.n	80053e4 <_printf_i+0x14c>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	4299      	cmp	r1, r3
 80053d8:	bfde      	ittt	le
 80053da:	2330      	movle	r3, #48	; 0x30
 80053dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e4:	1b52      	subs	r2, r2, r5
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	f8cd a000 	str.w	sl, [sp]
 80053ec:	464b      	mov	r3, r9
 80053ee:	aa03      	add	r2, sp, #12
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fee2 	bl	80051bc <_printf_common>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d14c      	bne.n	8005496 <_printf_i+0x1fe>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	b004      	add	sp, #16
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	4835      	ldr	r0, [pc, #212]	; (80054dc <_printf_i+0x244>)
 8005408:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800540c:	6829      	ldr	r1, [r5, #0]
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f851 6b04 	ldr.w	r6, [r1], #4
 8005414:	6029      	str	r1, [r5, #0]
 8005416:	061d      	lsls	r5, r3, #24
 8005418:	d514      	bpl.n	8005444 <_printf_i+0x1ac>
 800541a:	07df      	lsls	r7, r3, #31
 800541c:	bf44      	itt	mi
 800541e:	f043 0320 	orrmi.w	r3, r3, #32
 8005422:	6023      	strmi	r3, [r4, #0]
 8005424:	b91e      	cbnz	r6, 800542e <_printf_i+0x196>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f023 0320 	bic.w	r3, r3, #32
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2310      	movs	r3, #16
 8005430:	e7b0      	b.n	8005394 <_printf_i+0xfc>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f043 0320 	orr.w	r3, r3, #32
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	2378      	movs	r3, #120	; 0x78
 800543c:	4828      	ldr	r0, [pc, #160]	; (80054e0 <_printf_i+0x248>)
 800543e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005442:	e7e3      	b.n	800540c <_printf_i+0x174>
 8005444:	0659      	lsls	r1, r3, #25
 8005446:	bf48      	it	mi
 8005448:	b2b6      	uxthmi	r6, r6
 800544a:	e7e6      	b.n	800541a <_printf_i+0x182>
 800544c:	4615      	mov	r5, r2
 800544e:	e7bb      	b.n	80053c8 <_printf_i+0x130>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6826      	ldr	r6, [r4, #0]
 8005454:	6961      	ldr	r1, [r4, #20]
 8005456:	1d18      	adds	r0, r3, #4
 8005458:	6028      	str	r0, [r5, #0]
 800545a:	0635      	lsls	r5, r6, #24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	d501      	bpl.n	8005464 <_printf_i+0x1cc>
 8005460:	6019      	str	r1, [r3, #0]
 8005462:	e002      	b.n	800546a <_printf_i+0x1d2>
 8005464:	0670      	lsls	r0, r6, #25
 8005466:	d5fb      	bpl.n	8005460 <_printf_i+0x1c8>
 8005468:	8019      	strh	r1, [r3, #0]
 800546a:	2300      	movs	r3, #0
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	4615      	mov	r5, r2
 8005470:	e7ba      	b.n	80053e8 <_printf_i+0x150>
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	1d1a      	adds	r2, r3, #4
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	681d      	ldr	r5, [r3, #0]
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	2100      	movs	r1, #0
 800547e:	4628      	mov	r0, r5
 8005480:	f7fa feae 	bl	80001e0 <memchr>
 8005484:	b108      	cbz	r0, 800548a <_printf_i+0x1f2>
 8005486:	1b40      	subs	r0, r0, r5
 8005488:	6060      	str	r0, [r4, #4]
 800548a:	6863      	ldr	r3, [r4, #4]
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	2300      	movs	r3, #0
 8005490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005494:	e7a8      	b.n	80053e8 <_printf_i+0x150>
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	462a      	mov	r2, r5
 800549a:	4649      	mov	r1, r9
 800549c:	4640      	mov	r0, r8
 800549e:	47d0      	blx	sl
 80054a0:	3001      	adds	r0, #1
 80054a2:	d0ab      	beq.n	80053fc <_printf_i+0x164>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	079b      	lsls	r3, r3, #30
 80054a8:	d413      	bmi.n	80054d2 <_printf_i+0x23a>
 80054aa:	68e0      	ldr	r0, [r4, #12]
 80054ac:	9b03      	ldr	r3, [sp, #12]
 80054ae:	4298      	cmp	r0, r3
 80054b0:	bfb8      	it	lt
 80054b2:	4618      	movlt	r0, r3
 80054b4:	e7a4      	b.n	8005400 <_printf_i+0x168>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4632      	mov	r2, r6
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d09b      	beq.n	80053fc <_printf_i+0x164>
 80054c4:	3501      	adds	r5, #1
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	9903      	ldr	r1, [sp, #12]
 80054ca:	1a5b      	subs	r3, r3, r1
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dcf2      	bgt.n	80054b6 <_printf_i+0x21e>
 80054d0:	e7eb      	b.n	80054aa <_printf_i+0x212>
 80054d2:	2500      	movs	r5, #0
 80054d4:	f104 0619 	add.w	r6, r4, #25
 80054d8:	e7f5      	b.n	80054c6 <_printf_i+0x22e>
 80054da:	bf00      	nop
 80054dc:	08005b8d 	.word	0x08005b8d
 80054e0:	08005b9e 	.word	0x08005b9e

080054e4 <_sbrk_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_sbrk_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fc f858 	bl	80015a4 <_sbrk>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_sbrk_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_sbrk_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	2000036c 	.word	0x2000036c

08005504 <__sread>:
 8005504:	b510      	push	{r4, lr}
 8005506:	460c      	mov	r4, r1
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	f000 fab2 	bl	8005a74 <_read_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	bfab      	itete	ge
 8005514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005516:	89a3      	ldrhlt	r3, [r4, #12]
 8005518:	181b      	addge	r3, r3, r0
 800551a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800551e:	bfac      	ite	ge
 8005520:	6563      	strge	r3, [r4, #84]	; 0x54
 8005522:	81a3      	strhlt	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__swrite>:
 8005526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	461f      	mov	r7, r3
 800552c:	898b      	ldrh	r3, [r1, #12]
 800552e:	05db      	lsls	r3, r3, #23
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4616      	mov	r6, r2
 8005536:	d505      	bpl.n	8005544 <__swrite+0x1e>
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	2302      	movs	r3, #2
 800553e:	2200      	movs	r2, #0
 8005540:	f000 f9c8 	bl	80058d4 <_lseek_r>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800554a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	4632      	mov	r2, r6
 8005552:	463b      	mov	r3, r7
 8005554:	4628      	mov	r0, r5
 8005556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	f000 b869 	b.w	8005630 <_write_r>

0800555e <__sseek>:
 800555e:	b510      	push	{r4, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 f9b5 	bl	80058d4 <_lseek_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	bf15      	itete	ne
 8005570:	6560      	strne	r0, [r4, #84]	; 0x54
 8005572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800557a:	81a3      	strheq	r3, [r4, #12]
 800557c:	bf18      	it	ne
 800557e:	81a3      	strhne	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__sclose>:
 8005582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005586:	f000 b8d3 	b.w	8005730 <_close_r>
	...

0800558c <__swbuf_r>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	460e      	mov	r6, r1
 8005590:	4614      	mov	r4, r2
 8005592:	4605      	mov	r5, r0
 8005594:	b118      	cbz	r0, 800559e <__swbuf_r+0x12>
 8005596:	6983      	ldr	r3, [r0, #24]
 8005598:	b90b      	cbnz	r3, 800559e <__swbuf_r+0x12>
 800559a:	f7ff fb81 	bl	8004ca0 <__sinit>
 800559e:	4b21      	ldr	r3, [pc, #132]	; (8005624 <__swbuf_r+0x98>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	d12b      	bne.n	80055fc <__swbuf_r+0x70>
 80055a4:	686c      	ldr	r4, [r5, #4]
 80055a6:	69a3      	ldr	r3, [r4, #24]
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	071a      	lsls	r2, r3, #28
 80055ae:	d52f      	bpl.n	8005610 <__swbuf_r+0x84>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	b36b      	cbz	r3, 8005610 <__swbuf_r+0x84>
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1ac0      	subs	r0, r0, r3
 80055ba:	6963      	ldr	r3, [r4, #20]
 80055bc:	b2f6      	uxtb	r6, r6
 80055be:	4283      	cmp	r3, r0
 80055c0:	4637      	mov	r7, r6
 80055c2:	dc04      	bgt.n	80055ce <__swbuf_r+0x42>
 80055c4:	4621      	mov	r1, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f948 	bl	800585c <_fflush_r>
 80055cc:	bb30      	cbnz	r0, 800561c <__swbuf_r+0x90>
 80055ce:	68a3      	ldr	r3, [r4, #8]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6022      	str	r2, [r4, #0]
 80055da:	701e      	strb	r6, [r3, #0]
 80055dc:	6963      	ldr	r3, [r4, #20]
 80055de:	3001      	adds	r0, #1
 80055e0:	4283      	cmp	r3, r0
 80055e2:	d004      	beq.n	80055ee <__swbuf_r+0x62>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	07db      	lsls	r3, r3, #31
 80055e8:	d506      	bpl.n	80055f8 <__swbuf_r+0x6c>
 80055ea:	2e0a      	cmp	r6, #10
 80055ec:	d104      	bne.n	80055f8 <__swbuf_r+0x6c>
 80055ee:	4621      	mov	r1, r4
 80055f0:	4628      	mov	r0, r5
 80055f2:	f000 f933 	bl	800585c <_fflush_r>
 80055f6:	b988      	cbnz	r0, 800561c <__swbuf_r+0x90>
 80055f8:	4638      	mov	r0, r7
 80055fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <__swbuf_r+0x9c>)
 80055fe:	429c      	cmp	r4, r3
 8005600:	d101      	bne.n	8005606 <__swbuf_r+0x7a>
 8005602:	68ac      	ldr	r4, [r5, #8]
 8005604:	e7cf      	b.n	80055a6 <__swbuf_r+0x1a>
 8005606:	4b09      	ldr	r3, [pc, #36]	; (800562c <__swbuf_r+0xa0>)
 8005608:	429c      	cmp	r4, r3
 800560a:	bf08      	it	eq
 800560c:	68ec      	ldreq	r4, [r5, #12]
 800560e:	e7ca      	b.n	80055a6 <__swbuf_r+0x1a>
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f81e 	bl	8005654 <__swsetup_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	d0cb      	beq.n	80055b4 <__swbuf_r+0x28>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	e7ea      	b.n	80055f8 <__swbuf_r+0x6c>
 8005622:	bf00      	nop
 8005624:	08005b3c 	.word	0x08005b3c
 8005628:	08005b5c 	.word	0x08005b5c
 800562c:	08005b1c 	.word	0x08005b1c

08005630 <_write_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	4d07      	ldr	r5, [pc, #28]	; (8005650 <_write_r+0x20>)
 8005634:	4604      	mov	r4, r0
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	2200      	movs	r2, #0
 800563c:	602a      	str	r2, [r5, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f7fc f836 	bl	80016b0 <_write>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d102      	bne.n	800564e <_write_r+0x1e>
 8005648:	682b      	ldr	r3, [r5, #0]
 800564a:	b103      	cbz	r3, 800564e <_write_r+0x1e>
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	bd38      	pop	{r3, r4, r5, pc}
 8005650:	2000036c 	.word	0x2000036c

08005654 <__swsetup_r>:
 8005654:	4b32      	ldr	r3, [pc, #200]	; (8005720 <__swsetup_r+0xcc>)
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	681d      	ldr	r5, [r3, #0]
 800565a:	4606      	mov	r6, r0
 800565c:	460c      	mov	r4, r1
 800565e:	b125      	cbz	r5, 800566a <__swsetup_r+0x16>
 8005660:	69ab      	ldr	r3, [r5, #24]
 8005662:	b913      	cbnz	r3, 800566a <__swsetup_r+0x16>
 8005664:	4628      	mov	r0, r5
 8005666:	f7ff fb1b 	bl	8004ca0 <__sinit>
 800566a:	4b2e      	ldr	r3, [pc, #184]	; (8005724 <__swsetup_r+0xd0>)
 800566c:	429c      	cmp	r4, r3
 800566e:	d10f      	bne.n	8005690 <__swsetup_r+0x3c>
 8005670:	686c      	ldr	r4, [r5, #4]
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005678:	0719      	lsls	r1, r3, #28
 800567a:	d42c      	bmi.n	80056d6 <__swsetup_r+0x82>
 800567c:	06dd      	lsls	r5, r3, #27
 800567e:	d411      	bmi.n	80056a4 <__swsetup_r+0x50>
 8005680:	2309      	movs	r3, #9
 8005682:	6033      	str	r3, [r6, #0]
 8005684:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	f04f 30ff 	mov.w	r0, #4294967295
 800568e:	e03e      	b.n	800570e <__swsetup_r+0xba>
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <__swsetup_r+0xd4>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d101      	bne.n	800569a <__swsetup_r+0x46>
 8005696:	68ac      	ldr	r4, [r5, #8]
 8005698:	e7eb      	b.n	8005672 <__swsetup_r+0x1e>
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <__swsetup_r+0xd8>)
 800569c:	429c      	cmp	r4, r3
 800569e:	bf08      	it	eq
 80056a0:	68ec      	ldreq	r4, [r5, #12]
 80056a2:	e7e6      	b.n	8005672 <__swsetup_r+0x1e>
 80056a4:	0758      	lsls	r0, r3, #29
 80056a6:	d512      	bpl.n	80056ce <__swsetup_r+0x7a>
 80056a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056aa:	b141      	cbz	r1, 80056be <__swsetup_r+0x6a>
 80056ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <__swsetup_r+0x66>
 80056b4:	4630      	mov	r0, r6
 80056b6:	f000 f991 	bl	80059dc <_free_r>
 80056ba:	2300      	movs	r3, #0
 80056bc:	6363      	str	r3, [r4, #52]	; 0x34
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	2300      	movs	r3, #0
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f043 0308 	orr.w	r3, r3, #8
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	b94b      	cbnz	r3, 80056ee <__swsetup_r+0x9a>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e4:	d003      	beq.n	80056ee <__swsetup_r+0x9a>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f92b 	bl	8005944 <__smakebuf_r>
 80056ee:	89a0      	ldrh	r0, [r4, #12]
 80056f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056f4:	f010 0301 	ands.w	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <__swsetup_r+0xbc>
 80056fa:	2300      	movs	r3, #0
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	425b      	negs	r3, r3
 8005702:	61a3      	str	r3, [r4, #24]
 8005704:	6923      	ldr	r3, [r4, #16]
 8005706:	b943      	cbnz	r3, 800571a <__swsetup_r+0xc6>
 8005708:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800570c:	d1ba      	bne.n	8005684 <__swsetup_r+0x30>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	0781      	lsls	r1, r0, #30
 8005712:	bf58      	it	pl
 8005714:	6963      	ldrpl	r3, [r4, #20]
 8005716:	60a3      	str	r3, [r4, #8]
 8005718:	e7f4      	b.n	8005704 <__swsetup_r+0xb0>
 800571a:	2000      	movs	r0, #0
 800571c:	e7f7      	b.n	800570e <__swsetup_r+0xba>
 800571e:	bf00      	nop
 8005720:	20000034 	.word	0x20000034
 8005724:	08005b3c 	.word	0x08005b3c
 8005728:	08005b5c 	.word	0x08005b5c
 800572c:	08005b1c 	.word	0x08005b1c

08005730 <_close_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d06      	ldr	r5, [pc, #24]	; (800574c <_close_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fb fefd 	bl	800153a <_close>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_close_r+0x1a>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_close_r+0x1a>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	2000036c 	.word	0x2000036c

08005750 <__sflush_r>:
 8005750:	898a      	ldrh	r2, [r1, #12]
 8005752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	0710      	lsls	r0, r2, #28
 800575a:	460c      	mov	r4, r1
 800575c:	d458      	bmi.n	8005810 <__sflush_r+0xc0>
 800575e:	684b      	ldr	r3, [r1, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dc05      	bgt.n	8005770 <__sflush_r+0x20>
 8005764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc02      	bgt.n	8005770 <__sflush_r+0x20>
 800576a:	2000      	movs	r0, #0
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005772:	2e00      	cmp	r6, #0
 8005774:	d0f9      	beq.n	800576a <__sflush_r+0x1a>
 8005776:	2300      	movs	r3, #0
 8005778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800577c:	682f      	ldr	r7, [r5, #0]
 800577e:	602b      	str	r3, [r5, #0]
 8005780:	d032      	beq.n	80057e8 <__sflush_r+0x98>
 8005782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	075a      	lsls	r2, r3, #29
 8005788:	d505      	bpl.n	8005796 <__sflush_r+0x46>
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	1ac0      	subs	r0, r0, r3
 800578e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005790:	b10b      	cbz	r3, 8005796 <__sflush_r+0x46>
 8005792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005794:	1ac0      	subs	r0, r0, r3
 8005796:	2300      	movs	r3, #0
 8005798:	4602      	mov	r2, r0
 800579a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800579c:	6a21      	ldr	r1, [r4, #32]
 800579e:	4628      	mov	r0, r5
 80057a0:	47b0      	blx	r6
 80057a2:	1c43      	adds	r3, r0, #1
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	d106      	bne.n	80057b6 <__sflush_r+0x66>
 80057a8:	6829      	ldr	r1, [r5, #0]
 80057aa:	291d      	cmp	r1, #29
 80057ac:	d82c      	bhi.n	8005808 <__sflush_r+0xb8>
 80057ae:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <__sflush_r+0x108>)
 80057b0:	40ca      	lsrs	r2, r1
 80057b2:	07d6      	lsls	r6, r2, #31
 80057b4:	d528      	bpl.n	8005808 <__sflush_r+0xb8>
 80057b6:	2200      	movs	r2, #0
 80057b8:	6062      	str	r2, [r4, #4]
 80057ba:	04d9      	lsls	r1, r3, #19
 80057bc:	6922      	ldr	r2, [r4, #16]
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	d504      	bpl.n	80057cc <__sflush_r+0x7c>
 80057c2:	1c42      	adds	r2, r0, #1
 80057c4:	d101      	bne.n	80057ca <__sflush_r+0x7a>
 80057c6:	682b      	ldr	r3, [r5, #0]
 80057c8:	b903      	cbnz	r3, 80057cc <__sflush_r+0x7c>
 80057ca:	6560      	str	r0, [r4, #84]	; 0x54
 80057cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ce:	602f      	str	r7, [r5, #0]
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d0ca      	beq.n	800576a <__sflush_r+0x1a>
 80057d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__sflush_r+0x92>
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 f8fd 	bl	80059dc <_free_r>
 80057e2:	2000      	movs	r0, #0
 80057e4:	6360      	str	r0, [r4, #52]	; 0x34
 80057e6:	e7c1      	b.n	800576c <__sflush_r+0x1c>
 80057e8:	6a21      	ldr	r1, [r4, #32]
 80057ea:	2301      	movs	r3, #1
 80057ec:	4628      	mov	r0, r5
 80057ee:	47b0      	blx	r6
 80057f0:	1c41      	adds	r1, r0, #1
 80057f2:	d1c7      	bne.n	8005784 <__sflush_r+0x34>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0c4      	beq.n	8005784 <__sflush_r+0x34>
 80057fa:	2b1d      	cmp	r3, #29
 80057fc:	d001      	beq.n	8005802 <__sflush_r+0xb2>
 80057fe:	2b16      	cmp	r3, #22
 8005800:	d101      	bne.n	8005806 <__sflush_r+0xb6>
 8005802:	602f      	str	r7, [r5, #0]
 8005804:	e7b1      	b.n	800576a <__sflush_r+0x1a>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	e7ad      	b.n	800576c <__sflush_r+0x1c>
 8005810:	690f      	ldr	r7, [r1, #16]
 8005812:	2f00      	cmp	r7, #0
 8005814:	d0a9      	beq.n	800576a <__sflush_r+0x1a>
 8005816:	0793      	lsls	r3, r2, #30
 8005818:	680e      	ldr	r6, [r1, #0]
 800581a:	bf08      	it	eq
 800581c:	694b      	ldreq	r3, [r1, #20]
 800581e:	600f      	str	r7, [r1, #0]
 8005820:	bf18      	it	ne
 8005822:	2300      	movne	r3, #0
 8005824:	eba6 0807 	sub.w	r8, r6, r7
 8005828:	608b      	str	r3, [r1, #8]
 800582a:	f1b8 0f00 	cmp.w	r8, #0
 800582e:	dd9c      	ble.n	800576a <__sflush_r+0x1a>
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005834:	4643      	mov	r3, r8
 8005836:	463a      	mov	r2, r7
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	2800      	cmp	r0, #0
 800583e:	dc06      	bgt.n	800584e <__sflush_r+0xfe>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e78e      	b.n	800576c <__sflush_r+0x1c>
 800584e:	4407      	add	r7, r0
 8005850:	eba8 0800 	sub.w	r8, r8, r0
 8005854:	e7e9      	b.n	800582a <__sflush_r+0xda>
 8005856:	bf00      	nop
 8005858:	20400001 	.word	0x20400001

0800585c <_fflush_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	4605      	mov	r5, r0
 8005862:	460c      	mov	r4, r1
 8005864:	b913      	cbnz	r3, 800586c <_fflush_r+0x10>
 8005866:	2500      	movs	r5, #0
 8005868:	4628      	mov	r0, r5
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	b118      	cbz	r0, 8005876 <_fflush_r+0x1a>
 800586e:	6983      	ldr	r3, [r0, #24]
 8005870:	b90b      	cbnz	r3, 8005876 <_fflush_r+0x1a>
 8005872:	f7ff fa15 	bl	8004ca0 <__sinit>
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <_fflush_r+0x6c>)
 8005878:	429c      	cmp	r4, r3
 800587a:	d11b      	bne.n	80058b4 <_fflush_r+0x58>
 800587c:	686c      	ldr	r4, [r5, #4]
 800587e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ef      	beq.n	8005866 <_fflush_r+0xa>
 8005886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005888:	07d0      	lsls	r0, r2, #31
 800588a:	d404      	bmi.n	8005896 <_fflush_r+0x3a>
 800588c:	0599      	lsls	r1, r3, #22
 800588e:	d402      	bmi.n	8005896 <_fflush_r+0x3a>
 8005890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005892:	f7ff faa3 	bl	8004ddc <__retarget_lock_acquire_recursive>
 8005896:	4628      	mov	r0, r5
 8005898:	4621      	mov	r1, r4
 800589a:	f7ff ff59 	bl	8005750 <__sflush_r>
 800589e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a0:	07da      	lsls	r2, r3, #31
 80058a2:	4605      	mov	r5, r0
 80058a4:	d4e0      	bmi.n	8005868 <_fflush_r+0xc>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	059b      	lsls	r3, r3, #22
 80058aa:	d4dd      	bmi.n	8005868 <_fflush_r+0xc>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f7ff fa96 	bl	8004dde <__retarget_lock_release_recursive>
 80058b2:	e7d9      	b.n	8005868 <_fflush_r+0xc>
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <_fflush_r+0x70>)
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d101      	bne.n	80058be <_fflush_r+0x62>
 80058ba:	68ac      	ldr	r4, [r5, #8]
 80058bc:	e7df      	b.n	800587e <_fflush_r+0x22>
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <_fflush_r+0x74>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	bf08      	it	eq
 80058c4:	68ec      	ldreq	r4, [r5, #12]
 80058c6:	e7da      	b.n	800587e <_fflush_r+0x22>
 80058c8:	08005b3c 	.word	0x08005b3c
 80058cc:	08005b5c 	.word	0x08005b5c
 80058d0:	08005b1c 	.word	0x08005b1c

080058d4 <_lseek_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d07      	ldr	r5, [pc, #28]	; (80058f4 <_lseek_r+0x20>)
 80058d8:	4604      	mov	r4, r0
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	2200      	movs	r2, #0
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fb fe50 	bl	8001588 <_lseek>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_lseek_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_lseek_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	2000036c 	.word	0x2000036c

080058f8 <__swhatbuf_r>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	460e      	mov	r6, r1
 80058fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005900:	2900      	cmp	r1, #0
 8005902:	b096      	sub	sp, #88	; 0x58
 8005904:	4614      	mov	r4, r2
 8005906:	461d      	mov	r5, r3
 8005908:	da08      	bge.n	800591c <__swhatbuf_r+0x24>
 800590a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	061a      	lsls	r2, r3, #24
 8005914:	d410      	bmi.n	8005938 <__swhatbuf_r+0x40>
 8005916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800591a:	e00e      	b.n	800593a <__swhatbuf_r+0x42>
 800591c:	466a      	mov	r2, sp
 800591e:	f000 f8bb 	bl	8005a98 <_fstat_r>
 8005922:	2800      	cmp	r0, #0
 8005924:	dbf1      	blt.n	800590a <__swhatbuf_r+0x12>
 8005926:	9a01      	ldr	r2, [sp, #4]
 8005928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800592c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005930:	425a      	negs	r2, r3
 8005932:	415a      	adcs	r2, r3
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	e7ee      	b.n	8005916 <__swhatbuf_r+0x1e>
 8005938:	2340      	movs	r3, #64	; 0x40
 800593a:	2000      	movs	r0, #0
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	b016      	add	sp, #88	; 0x58
 8005940:	bd70      	pop	{r4, r5, r6, pc}
	...

08005944 <__smakebuf_r>:
 8005944:	898b      	ldrh	r3, [r1, #12]
 8005946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005948:	079d      	lsls	r5, r3, #30
 800594a:	4606      	mov	r6, r0
 800594c:	460c      	mov	r4, r1
 800594e:	d507      	bpl.n	8005960 <__smakebuf_r+0x1c>
 8005950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	2301      	movs	r3, #1
 800595a:	6163      	str	r3, [r4, #20]
 800595c:	b002      	add	sp, #8
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	ab01      	add	r3, sp, #4
 8005962:	466a      	mov	r2, sp
 8005964:	f7ff ffc8 	bl	80058f8 <__swhatbuf_r>
 8005968:	9900      	ldr	r1, [sp, #0]
 800596a:	4605      	mov	r5, r0
 800596c:	4630      	mov	r0, r6
 800596e:	f7ff fa57 	bl	8004e20 <_malloc_r>
 8005972:	b948      	cbnz	r0, 8005988 <__smakebuf_r+0x44>
 8005974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005978:	059a      	lsls	r2, r3, #22
 800597a:	d4ef      	bmi.n	800595c <__smakebuf_r+0x18>
 800597c:	f023 0303 	bic.w	r3, r3, #3
 8005980:	f043 0302 	orr.w	r3, r3, #2
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	e7e3      	b.n	8005950 <__smakebuf_r+0xc>
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <__smakebuf_r+0x7c>)
 800598a:	62b3      	str	r3, [r6, #40]	; 0x28
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	6020      	str	r0, [r4, #0]
 8005990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	9b00      	ldr	r3, [sp, #0]
 8005998:	6163      	str	r3, [r4, #20]
 800599a:	9b01      	ldr	r3, [sp, #4]
 800599c:	6120      	str	r0, [r4, #16]
 800599e:	b15b      	cbz	r3, 80059b8 <__smakebuf_r+0x74>
 80059a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059a4:	4630      	mov	r0, r6
 80059a6:	f000 f889 	bl	8005abc <_isatty_r>
 80059aa:	b128      	cbz	r0, 80059b8 <__smakebuf_r+0x74>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	89a0      	ldrh	r0, [r4, #12]
 80059ba:	4305      	orrs	r5, r0
 80059bc:	81a5      	strh	r5, [r4, #12]
 80059be:	e7cd      	b.n	800595c <__smakebuf_r+0x18>
 80059c0:	08004c39 	.word	0x08004c39

080059c4 <__malloc_lock>:
 80059c4:	4801      	ldr	r0, [pc, #4]	; (80059cc <__malloc_lock+0x8>)
 80059c6:	f7ff ba09 	b.w	8004ddc <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	20000360 	.word	0x20000360

080059d0 <__malloc_unlock>:
 80059d0:	4801      	ldr	r0, [pc, #4]	; (80059d8 <__malloc_unlock+0x8>)
 80059d2:	f7ff ba04 	b.w	8004dde <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	20000360 	.word	0x20000360

080059dc <_free_r>:
 80059dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059de:	2900      	cmp	r1, #0
 80059e0:	d044      	beq.n	8005a6c <_free_r+0x90>
 80059e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e6:	9001      	str	r0, [sp, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f1a1 0404 	sub.w	r4, r1, #4
 80059ee:	bfb8      	it	lt
 80059f0:	18e4      	addlt	r4, r4, r3
 80059f2:	f7ff ffe7 	bl	80059c4 <__malloc_lock>
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <_free_r+0x94>)
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x30>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a08:	f7ff bfe2 	b.w	80059d0 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x46>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1949      	addeq	r1, r1, r5
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x22>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x50>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x46>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1855      	adds	r5, r2, r1
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x70>
 8005a34:	6824      	ldr	r4, [r4, #0]
 8005a36:	4421      	add	r1, r4
 8005a38:	1854      	adds	r4, r2, r1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x26>
 8005a40:	681c      	ldr	r4, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	4421      	add	r1, r4
 8005a48:	6011      	str	r1, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x26>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x78>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x26>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1949      	addeq	r1, r1, r5
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x26>
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	20000364 	.word	0x20000364

08005a74 <_read_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_read_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fb fd3c 	bl	8001500 <_read>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_read_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_read_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	2000036c 	.word	0x2000036c

08005a98 <_fstat_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_fstat_r+0x20>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	f7fb fd54 	bl	8001552 <_fstat>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	d102      	bne.n	8005ab4 <_fstat_r+0x1c>
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	b103      	cbz	r3, 8005ab4 <_fstat_r+0x1c>
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	bd38      	pop	{r3, r4, r5, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2000036c 	.word	0x2000036c

08005abc <_isatty_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	; (8005ad8 <_isatty_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fb fd53 	bl	8001572 <_isatty>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_isatty_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_isatty_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	2000036c 	.word	0x2000036c

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
